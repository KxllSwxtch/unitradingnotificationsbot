import json
import time
import telebot
import os
import requests
import urllib.parse
import re
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from dotenv import load_dotenv
from datetime import datetime
from translations import translations
from bs4 import BeautifulSoup
import threading

# –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
REQUESTS_FILE = "requests.json"
ACCESS_FILE = "access.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests = {}

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
checked_ids = set()

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è KbChaChaCha
KBCHACHA_COLOR_TRANSLATIONS = {
    "Í≤ÄÏ†ïÏÉâ": {"ru": "–ß—ë—Ä–Ω—ã–π", "code": "006001"},
    "Ìù∞ÏÉâ": {"ru": "–ë–µ–ª—ã–π", "code": "006002"},
    "ÏùÄÏÉâ": {"ru": "–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "code": "006003"},
    "ÏßÑÏ£ºÏÉâ": {"ru": "–ñ–µ–º—á—É–∂–Ω—ã–π", "code": "006004"},
    "ÌöåÏÉâ": {"ru": "–°–µ—Ä—ã–π", "code": "006005"},
    "Îπ®Í∞ÑÏÉâ": {"ru": "–ö—Ä–∞—Å–Ω—ã–π", "code": "006006"},
    "ÌååÎûÄÏÉâ": {"ru": "–°–∏–Ω–∏–π", "code": "006007"},
    "Ï£ºÌô©ÏÉâ": {"ru": "–û—Ä–∞–Ω–∂–µ–≤—ã–π", "code": "006008"},
    "Í∞àÏÉâ": {"ru": "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π", "code": "006009"},
    "Ï¥àÎ°ùÏÉâ": {"ru": "–ó–µ–ª—ë–Ω—ã–π", "code": "006010jn"},
    "ÎÖ∏ÎûÄÏÉâ": {"ru": "–ñ—ë–ª—Ç—ã–π", "code": "006011"},
    "Î≥¥ÎùºÏÉâ": {"ru": "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "code": "006012"},
    "–õ—é–±–æ–π": {"ru": "–õ—é–±–æ–π", "code": ""},
}

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è KCar
KCAR_COLOR_TRANSLATIONS = {
    "Ìù∞ÏÉâ": "–ë–µ–ª—ã–π",
    "ÏßÑÏ£ºÏÉâ": "–ñ–µ–º—á—É–∂–Ω—ã–π",
    "Í≤ÄÏ†ïÏÉâ": "–ß—ë—Ä–Ω—ã–π",
    "Í≤ÄÏ†ïÌà¨ÌÜ§": "–ß—ë—Ä–Ω—ã–π (–¥–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–π)",
    "Ï•êÏÉâ": "–¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π",
    "ÏùÄÏÉâ": "–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π",
    "ÏùÄÌöåÏÉâ": "–°–µ—Ä–æ-—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π",
    "ÏùÄÏÉâÌà¨ÌÜ§": "–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π (–¥–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–π)",
    "Ìù∞ÏÉâÌà¨ÌÜ§": "–ë–µ–ª—ã–π (–¥–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–π)",
    "ÏßÑÏ£ºÌà¨ÌÜ§": "–ñ–µ–º—á—É–∂–Ω—ã–π (–¥–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–π)",
    "ÏùÄÌïòÏÉâ": "–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä—ã–π",
    "Î™ÖÏùÄÏÉâ": "–°–≤–µ—Ç–ª–æ-—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π",
    "Îπ®Í∞ÑÏÉâ": "–ö—Ä–∞—Å–Ω—ã–π",
    "Ï£ºÌô©ÏÉâ": "–û—Ä–∞–Ω–∂–µ–≤—ã–π",
    "ÏûêÏ£ºÏÉâ": "–ë–æ—Ä–¥–æ–≤—ã–π",
    "Î≥¥ÎùºÏÉâ": "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π",
    "Î∂ÑÌôçÏÉâ": "–†–æ–∑–æ–≤—ã–π",
    "ÎÖ∏ÎûÄÏÉâ": "–ñ—ë–ª—Ç—ã–π",
    "Í∞àÎåÄÏÉâ": "–ö–æ—Ä–∏—á–Ω–µ–≤–∞—Ç–æ-—Å–µ—Ä—ã–π",
    "Ïó∞Í∏àÏÉâ": "–°–≤–µ—Ç–ª–æ-–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π",
    "Í∞àÏÉâ": "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π",
    "Í∞àÏÉâÌà¨ÌÜ§": "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π (–¥–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–π)",
    "Í∏àÏÉâ": "–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π",
    "Í∏àÏÉâÌà¨ÌÜ§": "–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π (–¥–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–π)",
    "Ï≤≠ÏÉâ": "–°–∏–Ω–∏–π",
    "ÌïòÎäòÏÉâ": "–ì–æ–ª—É–±–æ–π",
    "Îã¥ÎÖπÏÉâ": "–¢—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π",
    "ÎÖπÏÉâ": "–ó–µ–ª—ë–Ω—ã–π",
    "Ïó∞ÎëêÏÉâ": "–°–∞–ª–∞—Ç–æ–≤—ã–π",
    "Ï≤≠Ïò•ÏÉâ": "–ë–∏—Ä—é–∑–æ–≤—ã–π",
    "Í∏∞ÌÉÄ": "–î—Ä—É–≥–æ–π",
    "–õ—é–±–æ–π": "–õ—é–±–æ–π",
}


def load_access():
    if os.path.exists(ACCESS_FILE):
        try:
            with open(ACCESS_FILE, "r", encoding="utf-8") as f:
                return set(json.load(f))
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å access.json: {e}")
            return set()
    return set()


def save_access():
    try:
        with open(ACCESS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(ACCESS), f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ access.json: {e}")


MANAGER = 56022406

COLOR_TRANSLATIONS = {
    "Í≤ÄÏ†ïÏÉâ": "–ß—ë—Ä–Ω—ã–π",
    "Ï•êÏÉâ": "–¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π",
    "ÏùÄÏÉâ": "–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π",
    "ÏùÄÌöåÏÉâ": "–°–µ—Ä–æ-—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π",
    "Ìù∞ÏÉâ": "–ë–µ–ª—ã–π",
    "ÏùÄÌïòÏÉâ": "–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä—ã–π",
    "Î™ÖÏùÄÏÉâ": "–°–≤–µ—Ç–ª–æ-—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π",
    "Í∞àÎåÄÏÉâ": "–ö–æ—Ä–∏—á–Ω–µ–≤–∞—Ç–æ-—Å–µ—Ä—ã–π",
    "Ïó∞Í∏àÏÉâ": "–°–≤–µ—Ç–ª–æ-–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π",
    "Ï≤≠ÏÉâ": "–°–∏–Ω–∏–π",
    "ÌïòÎäòÏÉâ": "–ì–æ–ª—É–±–æ–π",
    "Îã¥ÎÖπÏÉâ": "–¢—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π",
    "Ï≤≠Ïò•ÏÉâ": "–ë–∏—Ä—é–∑–æ–≤—ã–π",
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
state_storage = StateMemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)
user_search_data = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
ACCESS = load_access()
print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–∞: {ACCESS}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –º–æ–∂–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç
def is_authorized(user_id):
    global ACCESS

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
    always_allowed = [728438182, 6624693060, 6526086431]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ always_allowed, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ ACCESS, –¥–æ–±–∞–≤–ª—è–µ–º
    if user_id in always_allowed and user_id not in ACCESS:
        ACCESS.add(user_id)
        save_access()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–∞")

    return user_id in ACCESS


def translate_phrase(phrase):
    words = phrase.split()
    translated_words = [translations.get(word, word) for word in words]
    return " ".join(translated_words)


# –ö—ç—à –¥–ª—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
_sorted_translation_keys = None


def translate_smartly(text):
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è translations.
    –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–º–µ–Ω.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

    Returns:
        –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    global _sorted_translation_keys

    if not text or not isinstance(text, str):
        return text

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª—é—á–æ–º –≤ —Å–ª–æ–≤–∞—Ä–µ, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    if text in translations:
        return translations[text]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if _sorted_translation_keys is None:
        _sorted_translation_keys = sorted(translations.keys(), key=len, reverse=True)

    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–ª—é—á–µ–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    result = text
    for key in _sorted_translation_keys:
        if key in result:
            result = result.replace(key, translations[key])

    return result


def load_requests():
    global user_requests
    if os.path.exists(REQUESTS_FILE):
        try:
            with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
                user_requests = json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã: {e}")
            user_requests = {}
    else:
        user_requests = {}


def save_requests(new_data):
    global user_requests
    try:
        if os.path.exists(REQUESTS_FILE):
            with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                existing_data = json.loads(content) if content else {}
        else:
            existing_data = {}

        for user_id, new_requests in new_data.items():
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id ‚Äî —Å—Ç—Ä–æ–∫–∞
            user_id_str = str(user_id)
            existing_data[user_id_str] = new_requests

        user_requests = existing_data  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        with open(REQUESTS_FILE, "w", encoding="utf-8") as f:
            json.dump(user_requests, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")


# FSM: –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
class CarForm(StatesGroup):
    brand = State()
    model = State()
    generation = State()
    trim = State()
    color = State()
    mileage_from = State()
    mileage_to = State()


def get_manufacturers():
    url = "https://encar-proxy.habsida.net/api/nav?count=true&q=(And.Hidden.N._.SellType.%EC%9D%BC%EB%B0%98._.CarType.A.)&inav=%7CMetadata%7CSort"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        manufacturers = (
            data.get("iNav", {})
            .get("Nodes", [])[2]
            .get("Facets", [])[0]
            .get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        manufacturers.sort(key=lambda x: x.get("Metadata", {}).get("EngName", [""])[0])
        return manufacturers
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–æ–∫:", e)
        return []


def get_models_by_brand(manufacturer):
    url = f"https://encar-proxy.habsida.net/api/nav?count=true&q=(And.Hidden.N._.SellType.%EC%9D%BC%EB%B0%98._.(C.CarType.A._.Manufacturer.{manufacturer}.))&inav=%7CMetadata%7CSort"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        all_manufacturers = (
            data.get("iNav", {})
            .get("Nodes", [])[2]
            .get("Facets", [])[0]
            .get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_manufacturer = next(
            (item for item in all_manufacturers if item.get("IsSelected")), None
        )
        if selected_manufacturer:
            return (
                selected_manufacturer.get("Refinements", {})
                .get("Nodes", [])[0]
                .get("Facets", [])
            )
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è {manufacturer}:", e)
        return []


def get_generations_by_model(manufacturer, model_group):
    url = f"https://encar-proxy.habsida.net/api/nav?count=true&q=(And.Hidden.N._.SellType.%EC%9D%BC%EB%B0%98._.(C.CarType.A._.(C.Manufacturer.{manufacturer}._.ModelGroup.{model_group}.)))&inav=%7CMetadata%7CSort"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        all_manufacturers = (
            data.get("iNav", {})
            .get("Nodes", [])[2]
            .get("Facets", [])[0]
            .get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_manufacturer = next(
            (item for item in all_manufacturers if item.get("IsSelected")), None
        )
        if not selected_manufacturer:
            return []
        model_group_data = (
            selected_manufacturer.get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_model = next(
            (item for item in model_group_data if item.get("IsSelected")), None
        )
        if not selected_model:
            return []
        return (
            selected_model.get("Refinements", {}).get("Nodes", [])[0].get("Facets", [])
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è {manufacturer}, {model_group}:", e)
        return []


def get_trims_by_generation(manufacturer, model_group, model):
    url = f"https://encar-proxy.habsida.net/api/nav?count=true&q=(And.Hidden.N._.(C.CarType.A._.(C.Manufacturer.{manufacturer}._.(C.ModelGroup.{model_group}._.Model.{model}.))))&inav=%7CMetadata%7CSort"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        all_manufacturers = (
            data.get("iNav", {})
            .get("Nodes", [])[1]
            .get("Facets", [])[0]
            .get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_manufacturer = next(
            (item for item in all_manufacturers if item.get("IsSelected")), None
        )
        if not selected_manufacturer:
            return []
        model_group_data = (
            selected_manufacturer.get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_model_group = next(
            (item for item in model_group_data if item.get("IsSelected")), None
        )
        if not selected_model_group:
            return []
        model_data = (
            selected_model_group.get("Refinements", {})
            .get("Nodes", [])[0]
            .get("Facets", [])
        )
        selected_model = next(
            (item for item in model_data if item.get("IsSelected")), None
        )
        if not selected_model:
            return []
        return (
            selected_model.get("Refinements", {}).get("Nodes", [])[0].get("Facets", [])
        )
    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –¥–ª—è {manufacturer}, {model_group}, {model}:",
            e,
        )
        return []


@bot.message_handler(commands=["start"])
def start_handler(message):
    if not is_authorized(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ", callback_data="search_car"),
    )
    # markup.add(
    #     types.InlineKeyboardButton(
    #         "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", url="https://t.me/eightytwoautobot"
    #     ),
    # )
    markup.add(
        types.InlineKeyboardButton(
            "üìã –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="my_requests"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            "üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="delete_all_requests"
        )
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    markup.add(
        types.InlineKeyboardButton(
            "üì± TikTok", url="https://www.tiktok.com/@unitradingkr"
        ),
        types.InlineKeyboardButton(
            "üì∫ YouTube", url="https://youtube.com/@unitradingkr"
        ),
        types.InlineKeyboardButton(
            "üì∏ Instagram", url="https://www.instagram.com/uni.trading.kr"
        ),
    )

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –±–æ—Ç –æ—Ç *UniTrading*!\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üîç –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n"
        "‚Ä¢ üßÆ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ\n"
        "‚Ä¢ üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏ –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:*"
    )
    bot.send_message(
        message.chat.id, welcome_text, parse_mode="Markdown", reply_markup=markup
    )


@bot.message_handler(commands=["add-user"])
def handle_add_user(message):
    if message.from_user.id != MANAGER:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    msg = bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:"
    )
    bot.register_next_step_handler(msg, process_user_id_input)


def process_user_id_input(message):
    try:
        new_user_id = int(message.text.strip())
        ACCESS.add(new_user_id)
        save_access()
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {new_user_id} —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
        )
    except ValueError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")


@bot.callback_query_handler(func=lambda call: call.data == "start")
def handle_start_callback(call):
    if not is_authorized(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    start_handler(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "my_requests")
def handle_my_requests(call):
    if not is_authorized(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    user_id = str(call.from_user.id)
    requests_list = user_requests.get(user_id, [])
    load_requests()

    if not requests_list:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return

    for idx, req in enumerate(requests_list, 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        year_from = req.get("year_from", "–ù/–î")
        year_to = req.get("year_to", "–ù/–î")
        mileage_from = req.get("mileage_from", "–ù/–î")
        mileage_to = req.get("mileage_to", "–ù/–î")
        color = req.get("color", "–ù/–î")

        text = (
            f"üìå *–ó–∞–ø—Ä–æ—Å #{idx}:*\n"
            f"{req.get('manufacturer', '–ù/–î')} / {req.get('model_group', '–ù/–î')} / {req.get('model', '–ù/–î')} / {req.get('trim', '–ù/–î')}\n"
            f"–ì–æ–¥: {year_from}-{year_to}, –ü—Ä–æ–±–µ–≥: {mileage_from}‚Äì{mileage_to} –∫–º\n"
            f"–¶–≤–µ—Ç: {color}"
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                f"üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å #{idx}", callback_data=f"delete_request_{idx - 1}"
            )
        )
        bot.send_message(
            call.message.chat.id, text, parse_mode="Markdown", reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_request_"))
def handle_delete_request(call):
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[2])
    if user_id not in user_requests or index >= len(user_requests[user_id]):
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    removed = user_requests[user_id].pop(index)

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
        reply_markup=markup,
    )

    print(f"üóë –£–¥–∞–ª—ë–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {removed}")
    save_requests(user_requests)
    load_requests()


@bot.callback_query_handler(func=lambda call: call.data == "delete_all_requests")
def handle_delete_all_requests(call):
    user_id = str(call.from_user.id)
    if user_id in user_requests:
        user_requests[user_id] = []
        save_requests(user_requests)
        load_requests()
        bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")


@bot.callback_query_handler(func=lambda call: call.data == "search_car")
def handle_search_car(call):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–æ—â–∞–¥–æ–∫
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("Encar", callback_data="platform_encar"),
        types.InlineKeyboardButton("KbChaChaCha", callback_data="platform_kbchachacha"),
        types.InlineKeyboardButton("KCar", callback_data="platform_kcar"),
    )

    bot.send_message(
        call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("platform_"))
def handle_platform_selection(call):
    platform = call.data.split("_")[1]

    if platform == "encar":
        handle_encar_search(call)
    elif platform == "kbchachacha":
        handle_kbchachacha_search(call)
    elif platform == "kcar":
        handle_kcar_search(call)


def handle_encar_search(call):
    manufacturers = get_manufacturers()
    if not manufacturers:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä–∫–∏.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in manufacturers:  # –£–¥–∞–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ [:10]
        kr_name = item.get("DisplayValue", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        eng_name = item.get("Metadata", {}).get("EngName", [""])[0]
        callback_data = f"brand_{eng_name}_{kr_name}"
        display_text = f"{eng_name}"
        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    bot.send_message(
        call.message.chat.id, "–í—ã–±–µ—Ä–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("brand_"))
def handle_brand_selection(call):
    _, eng_name, kr_name = call.data.split("_", 2)
    models = get_models_by_brand(kr_name)
    if not models:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in models:
        model_kr = item.get("DisplayValue", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        model_eng = item.get("Metadata", {}).get("EngName", [""])[0]
        callback_data = f"model_{model_eng}_{model_kr}"
        display_text = f"{model_eng}"
        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {eng_name} ({kr_name})\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("model_"))
def handle_model_selection(call):
    _, model_eng, model_kr = call.data.split("_", 2)
    message_text = call.message.text
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    brand_line = next(
        (line for line in message_text.split("\n") if "–ú–∞—Ä–∫–∞:" in line), ""
    )
    brand_part = brand_line.replace("–ú–∞—Ä–∫–∞:", "").strip()
    if " (" in brand_part:
        brand_eng, brand_kr = brand_part.split(" (")
        brand_kr = brand_kr.rstrip(")")
    else:
        brand_eng = brand_part
        brand_kr = ""

    generations = get_generations_by_model(brand_kr, model_kr)
    if not generations:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏—è.")
        return

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫–æ–ª–µ–Ω–∏—è—Ö
    print(f"‚öôÔ∏è DEBUG [handle_model_selection] - –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è:")
    for idx, item in enumerate(generations[:3]):  # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–≤—ã–º–∏ 3 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        gen_kr = item.get("DisplayValue", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        gen_eng = item.get("Metadata", {}).get("EngName", [""])[0]
        print(f"  –ü–æ–∫–æ–ª–µ–Ω–∏–µ {idx+1}: gen_kr='{gen_kr}', gen_eng='{gen_eng}'")

    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in generations:
        gen_kr = item.get("DisplayValue", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        gen_eng = item.get("Metadata", {}).get("EngName", [""])[0]

        start_raw = str(item.get("Metadata", {}).get("ModelStartDate", [""])[0])
        end_raw = str(item.get("Metadata", {}).get("ModelEndDate", [""])[0])

        def format_date(date_str):
            if len(date_str) == 6:
                return f"{date_str[4:6]}.{date_str[0:4]}"
            return ""

        start_date = format_date(start_raw)
        end_date = format_date(end_raw) if len(end_raw) > 0 else "–Ω.–≤."

        period = f"({start_date} ‚Äî {end_date})" if start_date else ""

        callback_data = f"generation_{gen_eng}_{gen_kr}"
        translated_gen_kr = translate_smartly(gen_kr)
        translated_gen_eng = translate_smartly(gen_eng)

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ
        print(
            f"‚öôÔ∏è DEBUG [handle_model_selection] - –ü–µ—Ä–µ–≤–æ–¥: '{gen_kr}' -> '{translated_gen_kr}'"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–∏–æ–¥–æ–º, –±–µ–∑ –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        display_text = f"{gen_eng} {translated_gen_kr} {period}".strip()
        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {brand_eng.strip()} ({brand_kr})\n–ú–æ–¥–µ–ª—å: {model_eng} ({model_kr})\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–µ:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("generation_"))
def handle_generation_selection(call):
    _, generation_eng, generation_kr = call.data.split("_", 2)
    message_text = call.message.text

    # –í—ã–≤–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(
        f"üîç DEBUG [handle_generation_selection] - generation_eng: '{generation_eng}'"
    )
    print(f"üîç DEBUG [handle_generation_selection] - generation_kr: '{generation_kr}'")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    brand_line = next(
        (line for line in message_text.split("\n") if "–ú–∞—Ä–∫–∞:" in line), ""
    )
    model_line = next(
        (line for line in message_text.split("\n") if "–ú–æ–¥–µ–ª—å:" in line), ""
    )

    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ
    brand_info = brand_line.replace("–ú–∞—Ä–∫–∞:", "").strip()
    if " (" in brand_info and ")" in brand_info:
        brand_eng, brand_kr = brand_info.split(" (", 1)
        brand_kr = brand_kr.rstrip(")")
    else:
        brand_eng = brand_info
        brand_kr = ""

    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    model_info = model_line.replace("–ú–æ–¥–µ–ª—å:", "").strip()
    if " (" in model_info and ")" in model_info:
        model_eng, model_kr = model_info.split(" (", 1)
        model_kr = model_kr.rstrip(")")
    else:
        model_eng = model_info
        model_kr = ""

    # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(
        f"üîç DEBUG [handle_generation_selection] - brand_eng: '{brand_eng}', brand_kr: '{brand_kr}'"
    )
    print(
        f"üîç DEBUG [handle_generation_selection] - model_eng: '{model_eng}', model_kr: '{model_kr}'"
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç
    generations = get_generations_by_model(brand_kr, model_kr)
    if not generations:
        print(f"‚ùå DEBUG [handle_generation_selection] - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏—è")
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–µ.")
        return

    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö
    selected_generation = next(
        (
            g
            for g in generations
            if (g.get("DisplayValue") == generation_kr)
            or (generation_kr in g.get("DisplayValue", ""))
            or (generation_eng in g.get("Metadata", {}).get("EngName", [""])[0])
        ),
        None,
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–¥–æ–≤
    start_year, end_year = None, None
    current_year = datetime.now().year

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîç DEBUG [handle_generation_selection] - ENCAR API generation data:")
    if selected_generation:
        metadata = selected_generation.get("Metadata", {})
        for key, value in metadata.items():
            print(f"    {key}: {value}")

    # –ü–†–ò–û–†–ò–¢–ï–¢ #1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Encar
    if selected_generation:
        print(f"üîç DEBUG [handle_generation_selection] - –ù–∞–π–¥–µ–Ω–æ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –≤ API")

        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        metadata = selected_generation.get("Metadata", {})
        for key, value in metadata.items():
            print(f"  {key}: {value}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ API
        start_raw = str(metadata.get("ModelStartDate", [""])[0])
        end_raw = str(metadata.get("ModelEndDate", [""])[0] or "")

        print(
            f"üîç DEBUG [handle_generation_selection] - API –¥–∞—Ç—ã: start_raw='{start_raw}', end_raw='{end_raw}'"
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –≥–æ–¥—ã (—Ñ–æ—Ä–º–∞—Ç API: YYYYMM)
        if start_raw and len(start_raw) >= 4 and start_raw[:4].isdigit():
            start_year = int(start_raw[:4])
            print(
                f"üîç DEBUG [handle_generation_selection] - API start_year: {start_year}"
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã: –Ω—É–ª–∏ –∏–ª–∏ None –æ–∑–Ω–∞—á–∞—é—Ç "–ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è"
        if (
            end_raw
            and end_raw.lower() != "none"
            and end_raw != ""
            and len(end_raw) >= 4
            and end_raw[:4].isdigit()
        ):
            end_year = int(end_raw[:4])
            print(f"üîç DEBUG [handle_generation_selection] - API end_year: {end_year}")
        else:
            # –ï—Å–ª–∏ ModelEndDate –Ω–µ—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω null, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç "–ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è"
            end_year = current_year
            print(
                f"üîç DEBUG [handle_generation_selection] - API end_year: —Ç–µ–∫—É—â–∏–π –≥–æ–¥ ({current_year})"
            )

    # –ü–†–ò–û–†–ò–¢–ï–¢ #2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
    if start_year is None or end_year is None:
        print(
            f"üîç DEBUG [handle_generation_selection] - –ò—â–µ–º –≥–æ–¥—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è: '{generation_eng}'"
        )
        date_pattern = r"\(?(\d{2}\.\d{4}|\d{4})\s*[‚Äî‚Äì\-~]\s*(\d{2}\.\d{4}|\d{4})\)?"
        match = re.search(date_pattern, generation_eng)

        if match:
            start_date_str, end_date_str = match.groups()
            print(
                f"üîç DEBUG [handle_generation_selection] - –ù–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã: {start_date_str} - {end_date_str}"
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –¥–∞—Ç—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM.YYYY –∏–ª–∏ YYYY)
            extracted_start_year = None
            extracted_end_year = None

            if "." in start_date_str:
                extracted_start_year = int(start_date_str.split(".")[-1])
            else:
                extracted_start_year = int(start_date_str)

            if "." in end_date_str:
                extracted_end_year = int(end_date_str.split(".")[-1])
            else:
                extracted_end_year = int(end_date_str)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –≥–æ–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ API
            if start_year is None:
                start_year = extracted_start_year
                print(
                    f"üîç DEBUG [handle_generation_selection] - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω start_year –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: {start_year}"
                )

            if end_year is None:
                end_year = extracted_end_year
                print(
                    f"üîç DEBUG [handle_generation_selection] - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω end_year –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: {end_year}"
                )

    # –ü–†–ò–û–†–ò–¢–ï–¢ #3: –ü—Ä–æ–≤–µ—Ä—è–µ–º DisplayValue –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–æ–¥–æ–≤
    if (start_year is None or end_year is None) and selected_generation:
        display_value = selected_generation.get("DisplayValue", "")
        print(
            f"üîç DEBUG [handle_generation_selection] - DisplayValue: '{display_value}'"
        )

        # –ò—â–µ–º –≥–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ (YYYY-YYYY)
        year_pattern = r"\(?(\d{4})\s*[-~]\s*(\d{4})\)?"
        match = re.search(year_pattern, display_value)

        if match:
            extracted_start_year = int(match.group(1))
            extracted_end_year = int(match.group(2))

            if start_year is None:
                start_year = extracted_start_year
                print(
                    f"üîç DEBUG [handle_generation_selection] - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω start_year –∏–∑ DisplayValue: {start_year}"
                )

            if end_year is None:
                end_year = extracted_end_year
                print(
                    f"üîç DEBUG [handle_generation_selection] - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω end_year –∏–∑ DisplayValue: {end_year}"
                )

    # –ü–†–ò–û–†–ò–¢–ï–¢ #4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–∫–∞–∫ Hyundai Grandeur IG)
    if generation_eng.lower().find("ig") > -1 and (
        "grandeur" in generation_eng.lower() or "Í∑∏ÎûúÏ†Ä" in generation_kr
    ):
        print("üîç DEBUG [handle_generation_selection] - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å Grandeur IG")
        # –î–ª—è Hyundai Grandeur IG —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≥–æ–¥—ã 2016-2022
        if start_year is None or start_year > 2016:
            start_year = 2016
            print(
                f"üîç DEBUG [handle_generation_selection] - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω start_year –¥–ª—è Grandeur IG: {start_year}"
            )

        if end_year is None or end_year < 2022:
            end_year = 2022
            print(
                f"üîç DEBUG [handle_generation_selection] - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω end_year –¥–ª—è Grandeur IG: {end_year}"
            )

    # –ü–†–ò–û–†–ò–¢–ï–¢ #5: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if start_year is None:
        start_year = current_year - 7  # –¢–∏–ø–∏—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—ã–ø—É—Å–∫–∞
        print(
            f"üîç DEBUG [handle_generation_selection] - –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π start_year: {start_year}"
        )

    if end_year is None:
        end_year = current_year
        print(
            f"üîç DEBUG [handle_generation_selection] - –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π end_year: {end_year}"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–æ–≤
    # –ï—Å–ª–∏ –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –≤ –±—É–¥—É—â–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
    if start_year > current_year:
        print(
            f"‚ö†Ô∏è DEBUG [handle_generation_selection] - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –Ω–∞—á–∞–ª–∞: {start_year} > {current_year}"
        )
        start_year = current_year - 5

    # –ï—Å–ª–∏ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ–Ω—å—à–µ –≥–æ–¥–∞ –Ω–∞—á–∞–ª–∞
    if end_year < start_year:
        print(
            f"‚ö†Ô∏è DEBUG [handle_generation_selection] - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_year} < {start_year}"
        )
        end_year = current_year

    # –ï—Å–ª–∏ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –¥–∞–ª–µ–∫–æ–º –±—É–¥—É—â–µ–º (–±–æ–ª–µ–µ 2 –ª–µ—Ç)
    if end_year > current_year + 2:
        print(
            f"‚ö†Ô∏è DEBUG [handle_generation_selection] - –ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {end_year} > {current_year + 2}"
        )
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ù–ï –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º end_year - —Ç.–∫. —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, Hyundai Grandeur GN7 –≤—ã–ø—É—Å–∫–∞–µ—Ç—Å—è —Å 2022 –∏ –±—É–¥–µ—Ç –¥–æ 2030

    print(
        f"‚úÖ DEBUG [handle_generation_selection] - –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {start_year}-{end_year}"
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
    trims = get_trims_by_generation(brand_kr, model_kr, generation_kr)
    if not trims:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in trims:
        trim_kr = item.get("DisplayValue", "")
        trim_eng = item.get("Metadata", {}).get("EngName", [""])[0]
        callback_data = f"trim_{trim_eng}_{trim_kr}"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º translate_smartly –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
        translated_trim_kr = translate_smartly(trim_kr)
        display_text = translated_trim_kr

        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª–∏ –∏ –≥–æ–¥–∞—Ö
    user_search_data[user_id].update(
        {
            "manufacturer": brand_kr.strip(),
            "model_group": model_kr.strip(),
            "model": generation_kr.strip(),
            "year_from": start_year,
            "year_to": end_year,
        }
    )

    print(
        f"‚úÖ DEBUG [handle_generation_selection] - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–æ–¥—ã –≤ user_search_data: {start_year}-{end_year}"
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º translate_smartly –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–∫–æ–ª–µ–Ω–∏–π
    translated_generation_eng = translate_smartly(generation_eng)
    translated_generation_kr = translate_smartly(generation_kr)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {brand_eng.strip()} ({brand_kr})\n–ú–æ–¥–µ–ª—å: {model_eng} ({model_kr})\n–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {translated_generation_eng} ({translated_generation_kr})\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("trim_"))
def handle_trim_selection(call):
    parts = call.data.split("_", 2)
    trim_eng = parts[1]
    trim_kr = parts[2] if len(parts) > 2 else parts[1]

    print(f"‚úÖ DEBUG [handle_trim_selection] - raw data:")
    print(f"trim_eng: {trim_eng}")
    print(f"trim_kr: {trim_kr}")

    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ - –æ—Ç 2000 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    current_year = datetime.now().year
    start_year = 2000
    end_year = current_year

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–¥–∞—Ö
    print(
        f"‚úÖ DEBUG [handle_trim_selection] - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {start_year}-{end_year}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º trim –∏ –≥–æ–¥—ã
    user_search_data[user_id]["trim"] = trim_kr.strip()
    user_search_data[user_id]["year_from"] = start_year
    user_search_data[user_id]["year_to"] = end_year

    print(
        f"‚úÖ DEBUG [handle_trim_selection] - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è trim:"
    )
    print(json.dumps(user_search_data[user_id], indent=2, ensure_ascii=False))

    year_markup = types.InlineKeyboardMarkup(row_width=4)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–æ–¥–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ - –æ—Ç 2000 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –≥–æ–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    year_range = list(range(start_year, end_year + 1))

    print(
        f"‚úÖ DEBUG [handle_trim_selection] - –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–¥–æ–≤: {year_range}"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–æ–¥–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    for y in year_range:
        year_markup.add(
            types.InlineKeyboardButton(str(y), callback_data=f"year_from_{y}")
        )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    message_text = call.message.text
    brand_line = next(
        (line for line in message_text.split("\n") if "–ú–∞—Ä–∫–∞:" in line), ""
    )
    model_line = next(
        (line for line in message_text.split("\n") if "–ú–æ–¥–µ–ª—å:" in line), ""
    )
    generation_line = next(
        (line for line in message_text.split("\n") if "–ü–æ–∫–æ–ª–µ–Ω–∏–µ:" in line), ""
    )

    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    brand_info = brand_line.replace("–ú–∞—Ä–∫–∞:", "").strip()
    if " (" in brand_info and ")" in brand_info:
        brand_eng, brand_kr = brand_info.split(" (", 1)
        brand_kr = brand_kr.rstrip(")")
    else:
        brand_eng = brand_info
        brand_kr = ""

    model_info = model_line.replace("–ú–æ–¥–µ–ª—å:", "").strip()
    if " (" in model_info and ")" in model_info:
        model_eng, model_kr = model_info.split(" (", 1)
        model_kr = model_kr.rstrip(")")
    else:
        model_eng = model_info
        model_kr = ""

    generation_info = generation_line.replace("–ü–æ–∫–æ–ª–µ–Ω–∏–µ:", "").strip()
    if "(" in generation_info and ")" in generation_info:
        parts = generation_info.rsplit("(", 1)
        generation_eng = parts[0].strip()
        generation_kr = parts[1].replace(")", "").strip()
    else:
        generation_eng = generation_info
        generation_kr = ""

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º translate_smartly –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π
    translated_trim_eng = translate_smartly(trim_eng)
    translated_trim_kr = translate_smartly(trim_kr)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ –ø–µ—Ä–∏–æ–¥–µ –≤—ã–ø—É—Å–∫–∞
    year_period_text = f"–î–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞: {start_year}-{end_year}"

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {brand_eng.strip()} ({brand_kr})\n–ú–æ–¥–µ–ª—å: {model_eng} ({model_kr})\n–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {generation_eng} ({generation_kr})\n–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {translated_trim_eng} ({translated_trim_kr})\n{year_period_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=year_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("year_from_"))
def handle_year_from_selection(call):
    year_from = int(call.data.split("_")[2])
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ –Ω–∞—á–∞–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_search_data[user_id].update({"year_from": year_from})

    print(f"‚úÖ DEBUG [handle_year_from_selection] - –í—ã–±—Ä–∞–Ω –≥–æ–¥ –Ω–∞—á–∞–ª–∞: {year_from}")
    print(f"‚úÖ DEBUG [handle_year_from_selection] - –î–∞–Ω–Ω—ã–µ user_search_data:")
    print(json.dumps(user_search_data[user_id], indent=2, ensure_ascii=False))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞
    month_markup = types.InlineKeyboardMarkup(row_width=3)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–õ—é–±–æ–π –º–µ—Å—è—Ü"
    month_markup.add(
        types.InlineKeyboardButton(
            "–õ—é–±–æ–π –º–µ—Å—è—Ü", callback_data=f"month_from_{year_from}_0"
        )
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã (1-12)
    for month in range(1, 13):
        month_name = [
            "–Ø–Ω–≤–∞—Ä—å",
            "–§–µ–≤—Ä–∞–ª—å",
            "–ú–∞—Ä—Ç",
            "–ê–ø—Ä–µ–ª—å",
            "–ú–∞–π",
            "–ò—é–Ω—å",
            "–ò—é–ª—å",
            "–ê–≤–≥—É—Å—Ç",
            "–°–µ–Ω—Ç—è–±—Ä—å",
            "–û–∫—Ç—è–±—Ä—å",
            "–ù–æ—è–±—Ä—å",
            "–î–µ–∫–∞–±—Ä—å",
        ][month - 1]
        month_markup.add(
            types.InlineKeyboardButton(
                f"{month_name}", callback_data=f"month_from_{year_from}_{month}"
            )
        )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞
    bot.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥: {year_from}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=month_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("month_from_"))
def handle_month_from_selection(call):
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_")
    year_from = int(parts[2])
    month_from = int(parts[3])

    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞
    user_search_data[user_id]["month_from"] = month_from

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
    current_year = datetime.now().year
    end_year = current_year

    print(f"‚úÖ DEBUG [handle_month_from_selection] - –í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞: {month_from}")
    print(
        f"‚úÖ DEBUG [handle_month_from_selection] - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥: {end_year}"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    year_markup = types.InlineKeyboardMarkup(row_width=4)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –Ω–∞—á–∞–ª–∞ > —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    if year_from > current_year:
        print(
            f"‚ö†Ô∏è DEBUG [handle_month_from_selection] - –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –Ω–∞—á–∞–ª–∞ ({year_from}) > —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ ({current_year}), –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º"
        )
        year_range = [current_year]
    else:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –≥–æ–¥ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        year_range = list(range(year_from, current_year + 1))

    print(
        f"‚úÖ DEBUG [handle_month_from_selection] - –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –≥–æ–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ to: {list(year_range)}"
    )

    for y in year_range:
        year_markup.add(
            types.InlineKeyboardButton(str(y), callback_data=f"year_to_{year_from}_{y}")
        )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    month_name = (
        "–ª—é–±–æ–π"
        if month_from == 0
        else [
            "—è–Ω–≤–∞—Ä—å",
            "—Ñ–µ–≤—Ä–∞–ª—å",
            "–º–∞—Ä—Ç",
            "–∞–ø—Ä–µ–ª—å",
            "–º–∞–π",
            "–∏—é–Ω—å",
            "–∏—é–ª—å",
            "–∞–≤–≥—É—Å—Ç",
            "—Å–µ–Ω—Ç—è–±—Ä—å",
            "–æ–∫—Ç—è–±—Ä—å",
            "–Ω–æ—è–±—Ä—å",
            "–¥–µ–∫–∞–±—Ä—å",
        ][month_from - 1]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –ø–æ–∏—Å–∫–∞
    period_info = f"–î–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞: 2000-{current_year}"

    bot.edit_message_text(
        f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {year_from} –≥–æ–¥, {month_name}\n{period_info}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=year_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("year_to_"))
def handle_year_to_selection(call):
    year_from = int(call.data.split("_")[2])
    year_to = int(call.data.split("_")[3])
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
    current_year = datetime.now().year
    if year_to > current_year:
        year_to = current_year
        print(
            f"‚ö†Ô∏è DEBUG [handle_year_to_selection] - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π: {year_to}"
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    user_search_data[user_id]["year_to"] = year_to

    print(f"‚úÖ DEBUG [handle_year_to_selection] - –í—ã–±—Ä–∞–Ω –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥: {year_to}")
    print(f"‚úÖ DEBUG [handle_year_to_selection] - –î–∞–Ω–Ω—ã–µ user_search_data:")
    print(json.dumps(user_search_data[user_id], indent=2, ensure_ascii=False))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≥–æ–¥–∞
    month_markup = types.InlineKeyboardMarkup(row_width=3)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–õ—é–±–æ–π –º–µ—Å—è—Ü"
    month_markup.add(
        types.InlineKeyboardButton(
            "–õ—é–±–æ–π –º–µ—Å—è—Ü", callback_data=f"month_to_{year_from}_{year_to}_0"
        )
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã (1-12)
    for month in range(1, 13):
        month_name = [
            "–Ø–Ω–≤–∞—Ä—å",
            "–§–µ–≤—Ä–∞–ª—å",
            "–ú–∞—Ä—Ç",
            "–ê–ø—Ä–µ–ª—å",
            "–ú–∞–π",
            "–ò—é–Ω—å",
            "–ò—é–ª—å",
            "–ê–≤–≥—É—Å—Ç",
            "–°–µ–Ω—Ç—è–±—Ä—å",
            "–û–∫—Ç—è–±—Ä—å",
            "–ù–æ—è–±—Ä—å",
            "–î–µ–∫–∞–±—Ä—å",
        ][month - 1]
        month_markup.add(
            types.InlineKeyboardButton(
                f"{month_name}", callback_data=f"month_to_{year_from}_{year_to}_{month}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –ø–æ–∏—Å–∫–∞
    period_info = f"–î–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞: 2000-{current_year}"

    bot.edit_message_text(
        f"–ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥: {year_from}\n–ö–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥: {year_to}\n{period_info}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –º–µ—Å—è—Ü:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=month_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("month_to_"))
def handle_month_to_selection(call):
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_")
    year_from = int(parts[2])
    year_to = int(parts[3])
    month_to = int(parts[4])

    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—è—Ü –æ–∫–æ–Ω—á–∞–Ω–∏—è
    user_search_data[user_id]["month_to"] = month_to

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—á–∞–ª—å–Ω–æ–º –º–µ—Å—è—Ü–µ
    month_from = user_search_data[user_id].get("month_from", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≥–æ–¥–∞
    current_year = datetime.now().year
    if year_to > current_year:
        year_to = current_year
        user_search_data[user_id]["year_to"] = year_to
        print(
            f"‚ö†Ô∏è DEBUG [handle_month_to_selection] - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π: {year_to}"
        )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    month_from_name = (
        "–ª—é–±–æ–π"
        if month_from == 0
        else [
            "—è–Ω–≤–∞—Ä—å",
            "—Ñ–µ–≤—Ä–∞–ª—å",
            "–º–∞—Ä—Ç",
            "–∞–ø—Ä–µ–ª—å",
            "–º–∞–π",
            "–∏—é–Ω—å",
            "–∏—é–ª—å",
            "–∞–≤–≥—É—Å—Ç",
            "—Å–µ–Ω—Ç—è–±—Ä—å",
            "–æ–∫—Ç—è–±—Ä—å",
            "–Ω–æ—è–±—Ä—å",
            "–¥–µ–∫–∞–±—Ä—å",
        ][month_from - 1]
    )

    month_to_name = (
        "–ª—é–±–æ–π"
        if month_to == 0
        else [
            "—è–Ω–≤–∞—Ä—å",
            "—Ñ–µ–≤—Ä–∞–ª—å",
            "–º–∞—Ä—Ç",
            "–∞–ø—Ä–µ–ª—å",
            "–º–∞–π",
            "–∏—é–Ω—å",
            "–∏—é–ª—å",
            "–∞–≤–≥—É—Å—Ç",
            "—Å–µ–Ω—Ç—è–±—Ä—å",
            "–æ–∫—Ç—è–±—Ä—å",
            "–Ω–æ—è–±—Ä—å",
            "–¥–µ–∫–∞–±—Ä—å",
        ][month_to - 1]
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–±–µ–≥–∞
    mileage_markup = types.InlineKeyboardMarkup(row_width=4)
    for value in range(0, 200001, 10000):
        mileage_markup.add(
            types.InlineKeyboardButton(
                f"{value} –∫–º", callback_data=f"mileage_from_{value}"
            )
        )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    date_range_text = (
        f"—Å {year_from} –≥–æ–¥–∞ ({month_from_name}) –ø–æ {year_to} –≥–æ–¥ ({month_to_name})"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–Ω–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –ø–æ–∏—Å–∫–∞
    period_info = f"–î–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞: 2000-{current_year}"

    bot.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {date_range_text}\n{period_info}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=mileage_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("mileage_from_"))
def handle_mileage_from(call):
    mileage_from = int(call.data.split("_")[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥
    user_search_data[user_id]["mileage_from"] = mileage_from

    print(f"‚úÖ DEBUG user_search_data before mileage_from selection:")
    print(
        json.dumps(
            user_search_data.get(call.from_user.id, {}), indent=2, ensure_ascii=False
        )
    )

    mileage_markup = types.InlineKeyboardMarkup(row_width=4)
    for value in range(mileage_from + 10000, 200001, 10000):
        mileage_markup.add(
            types.InlineKeyboardButton(
                f"{value} –∫–º", callback_data=f"mileage_to_{mileage_from}_{value}"
            )
        )

    bot.send_message(
        call.message.chat.id,
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥: {mileage_from} –∫–º\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥:",
        reply_markup=mileage_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("mileage_to_"))
def handle_mileage_to(call):
    mileage_from = int(call.data.split("_")[2])
    mileage_to = int(call.data.split("_")[3])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥
    user_search_data[user_id]["mileage_to"] = mileage_to

    print(f"‚úÖ DEBUG user_search_data before mileage_to selection:")
    print(
        json.dumps(
            user_search_data.get(call.from_user.id, {}), indent=2, ensure_ascii=False
        )
    )

    markup = types.InlineKeyboardMarkup(row_width=2)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–æ–π —Ü–≤–µ—Ç"
    markup.add(types.InlineKeyboardButton("–õ—é–±–æ–π", callback_data="color_all"))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
    for kr, ru in COLOR_TRANSLATIONS.items():
        markup.add(types.InlineKeyboardButton(ru, callback_data=f"color_{kr}"))

    bot.send_message(
        call.message.chat.id,
        f"–ü—Ä–æ–±–µ–≥: –æ—Ç {mileage_from} –∫–º –¥–æ {mileage_to} –∫–º\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("color_"))
def handle_color_selection(call):
    selected_color_kr = call.data.split("_", 1)[1]
    message_text = call.message.text
    selected_color_ru = (
        "–õ—é–±–æ–π"
        if selected_color_kr == "all"
        else COLOR_TRANSLATIONS.get(selected_color_kr, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    )

    user_id = call.from_user.id
    user_data = user_search_data.get(user_id, {})
    print(f"‚úÖ DEBUG user_data before color selection: {user_data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = [
        "manufacturer",
        "model_group",
        "model",
        "trim",
        "year_from",
        "year_to",
    ]
    missing_fields = [field for field in required_fields if field not in user_data]

    if missing_fields:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è: {missing_fields}")
        bot.send_message(
            call.message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    user_search_data[user_id]["color"] = selected_color_kr

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    manufacturer = user_data["manufacturer"]
    model_group = user_data["model_group"]
    model = user_data["model"]
    trim = user_data["trim"]
    year_from = user_data["year_from"]
    year_to = user_data["year_to"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–µ–≥–µ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if "mileage_from" not in user_data or "mileage_to" not in user_data:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        mileage_line = next(
            (line for line in message_text.split("\n") if "–ü—Ä–æ–±–µ–≥:" in line), ""
        )
        if mileage_line:
            try:
                mileage_from = int(mileage_line.split("–æ—Ç")[1].split("–∫–º")[0].strip())
                mileage_to = int(mileage_line.split("–¥–æ")[1].split("–∫–º")[0].strip())
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                user_search_data[user_id]["mileage_from"] = mileage_from
                user_search_data[user_id]["mileage_to"] = mileage_to
            except:
                print(
                    "‚ö†Ô∏è DEBUG [handle_color_selection] - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–±–µ–≥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                mileage_from = 0
                mileage_to = 100000
                user_search_data[user_id]["mileage_from"] = mileage_from
                user_search_data[user_id]["mileage_to"] = mileage_to
        else:
            print(
                "‚ö†Ô∏è DEBUG [handle_color_selection] - –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–µ–≥–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            )
            mileage_from = 0
            mileage_to = 100000
            user_search_data[user_id]["mileage_from"] = mileage_from
            user_search_data[user_id]["mileage_to"] = mileage_to
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        mileage_from = user_data["mileage_from"]
        mileage_to = user_data["mileage_to"]

    print("‚öôÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    print(f"manufacturer: {manufacturer}")
    print(f"model_group: {model_group}")
    print(f"model: {model}")
    print(f"trim: {trim}")
    print(f"year_from: {year_from}")
    print(f"year_to: {year_to}")
    print(f"color: {selected_color_kr}")
    print(f"mileage_from: {mileage_from}")
    print(f"mileage_to: {mileage_to}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    markup = types.InlineKeyboardMarkup(row_width=3)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–∞—è" –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    markup.add(types.InlineKeyboardButton("–õ—é–±–∞—è", callback_data="price_from_any"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Ü–µ–Ω –æ—Ç 1 –¥–æ 100 –º–ª–Ω –≤–æ–Ω
    price_ranges = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100]
    buttons = []
    for price in price_ranges:
        price_param = price * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä API (1 –º–ª–Ω = 100)
        buttons.append(
            types.InlineKeyboardButton(
                f"{price} –º–ª–Ω", callback_data=f"price_from_{price_param}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 3
    for i in range(0, len(buttons), 3):
        row = buttons[i : i + 3]
        markup.row(*row)

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {manufacturer} ({model_group})\n"
        f"–ú–æ–¥–µ–ª—å: {model} ({trim})\n"
        f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year_from}-{year_to}\n"
        f"–ü—Ä–æ–±–µ–≥: –æ—Ç {mileage_from} –¥–æ {mileage_to} –∫–º\n"
        f"–¶–≤–µ—Ç: {selected_color_ru}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.message_handler(state=CarForm.brand)
def handle_brand(message):
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–æ–¥–µ–ª—å:")
    bot.set_state(message.from_user.id, CarForm.model, message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏
@bot.message_handler(state=CarForm.model)
def handle_model(message):
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–µ:")
    bot.set_state(message.from_user.id, CarForm.generation, message.chat.id)


def build_encar_url(
    manufacturer,
    model_group,
    model,
    trim,
    year_from,
    year_to,
    mileage_from,
    mileage_to,
    color,
    user_id=None,  # –î–æ–±–∞–≤–ª—è–µ–º user_id –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    price_from=None,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    price_to=None,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
):
    if not all(
        [manufacturer.strip(), model_group.strip(), model.strip(), trim.strip()]
    ):
        print("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL")
        return ""

    # –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîß DEBUG [build_encar_url] - –ò—Å—Ö–æ–¥–Ω—ã–µ –≥–æ–¥—ã: from={year_from}, to={year_to}")
    print(f"üîß DEBUG [build_encar_url] - –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id: {user_id}")
    print(f"üîß DEBUG [build_encar_url] - –¶–µ–Ω–∞: –æ—Ç={price_from}, –¥–æ={price_to}")

    # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    month_from = 0
    month_to = 0

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—Ü—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id is not None and user_id in user_search_data:
        month_from = user_search_data[user_id].get("month_from", 0)
        month_to = user_search_data[user_id].get("month_to", 0)

        print(
            f"üîß DEBUG [build_encar_url] - –ú–µ—Å—è—Ü—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: from={month_from}, to={month_to}"
        )
    else:
        print("üîß DEBUG [build_encar_url] - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # –í–°–ï–ì–î–ê —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –º–µ—Å—è—Ü–∞–º–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω)
    # –≠—Ç–∞ —Å–µ–∫—Ü–∏—è –∫–æ–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è user_id
    if month_from == 0:  # Any month selected for start
        year_from_formatted = f"{year_from}00"
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
        year_from_formatted = f"{year_from}{month_from:02d}"

    if month_to == 0:  # Any month selected for end
        year_to_formatted = f"{year_to}12"
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
        year_to_formatted = f"{year_to}{month_to:02d}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(
        f"üîß DEBUG [build_encar_url] - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã: –æ—Ç {year_from_formatted} –¥–æ {year_to_formatted}"
    )

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞–±–æ—á–∏–º –ø—Ä–∏–º–µ—Ä–æ–º
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º + –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–æ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º + –ø–µ—Ä–µ–¥ —Å–∫–æ–±–∫–æ–π
    if "(" in model and ")" in model:
        base_name, code_part = model.rsplit("(", 1)
        code = code_part.rstrip(")")
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ +, –Ω–æ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º + –ø–µ—Ä–µ–¥ —Å–∫–æ–±–∫–æ–π
        base_name = base_name.strip()
        model_formatted = f"{base_name.replace(' ', '+')}({code}_)"
    else:
        model_formatted = model.replace(" ", "+")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º trim (BadgeGroup), –∏—Å–ø–æ–ª—å–∑—É–µ–º + –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤
    trim_formatted = trim.replace(" ", "+")

    # –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–µ–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è + –∏ –¥—Ä—É–≥–∏–µ ASCII —Å–∏–º–≤–æ–ª—ã
    def safe_quote(text):
        # –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã
        result = ""
        for char in text:
            if ord(char) > 127:  # –ù–µ-ASCII —Å–∏–º–≤–æ–ª (–∫–æ—Ä–µ–π—Å–∫–∏–π)
                result += urllib.parse.quote(char)
            else:
                result += char
        return result

    manufacturer_encoded = safe_quote(manufacturer)
    model_group_encoded = safe_quote(model_group)
    model_formatted_encoded = safe_quote(model_formatted)
    trim_encoded = safe_quote(trim_formatted)

    # –°—Ç—Ä–æ–∏–º URL –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –†–ê–ë–û–ß–ï–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
    # (And.(And.Hidden.N._.(C.CarType.A._.(C.Manufacturer._.(C.ModelGroup._.(C.Model._.BadgeGroup.))))_.Year.range()._.Mileage.range())_.AdType.A.)

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π And –±–ª–æ–∫: –°–ù–ê–ß–ê–õ–ê –∏–µ—Ä–∞—Ä—Ö–∏—è –º–∞—à–∏–Ω—ã, –ë–ï–ó SellType –∏ Badge
    car_hierarchy = (
        f"Hidden.N._.(C.CarType.A._."
        f"(C.Manufacturer.{manufacturer_encoded}._."
        f"(C.ModelGroup.{model_group_encoded}._."
        f"(C.Model.{model_formatted_encoded}._.BadgeGroup.{trim_encoded}.))))"
    )

    # –§–∏–ª—å—Ç—Ä—ã –ø–æ –≥–æ–¥—É –∏ –ø—Ä–æ–±–µ–≥—É –∏–¥—É—Ç –ü–û–°–õ–ï –∏–µ—Ä–∞—Ä—Ö–∏–∏
    filters = [
        f"_.Year.range({year_from_formatted}..{year_to_formatted})",
    ]

    # –ü—Ä–æ–±–µ–≥: –µ—Å–ª–∏ mileage_from = 0, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç "..–º–∞–∫—Å–∏–º—É–º" –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
    if mileage_from == 0 or mileage_from is None:
        filters.append(f"._.Mileage.range(..{mileage_to})")
    else:
        filters.append(f"._.Mileage.range({mileage_from}..{mileage_to})")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if price_from is not None and price_to is not None:
        filters.append(f"._.Price.range({price_from}..{price_to})")
    elif price_from is not None:
        filters.append(f"._.Price.range({price_from}..)")
    elif price_to is not None:
        filters.append(f"._.Price.range(..{price_to})")

    # –°–æ–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π And –±–ª–æ–∫
    inner_and = f"(And.{car_hierarchy}{''.join(filters)}.)"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å (–∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–Ω–∞—Ä—É–∂–∏)
    if color and color.strip():
        color_encoded = safe_quote(color)
        color_filter = f"_.Color.{color_encoded}"
    else:
        color_filter = ""

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –í–û–ó–í–†–ê–©–ê–ï–ú _.AdType.A. –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ!
    query = f"(And.{inner_and}{color_filter}_.AdType.A.)"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π URL
    url = (
        f"https://encar-proxy.habsida.net/api/catalog?count=true&q={query}"
        f"&sr=%7CModifiedDate%7C0%7C1"
    )

    print(f"üì° –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL: {url}")
    return url


def check_for_new_cars(
    user_id,  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ user_id
    chat_id,  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    manufacturer,
    model_group,
    model,
    trim,
    year_from,
    year_to,
    mileage_from,
    mileage_to,
    color,
    price_from=None,
    price_to=None,
):
    url = build_encar_url(
        manufacturer,
        model_group,
        model,
        trim,
        year_from,
        year_to,
        mileage_from,
        mileage_to,
        color,
        user_id=user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        price_from=price_from,
        price_to=price_to,
    )

    while True:
        try:
            response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})

            if response.status_code != 200:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
                time.sleep(300)
                continue

            try:
                data = response.json()
            except Exception as json_err:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_err}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                time.sleep(300)
                continue

            cars = data.get("SearchResults", [])
            new_cars = [car for car in cars if car["Id"] not in checked_ids]

            for car in new_cars:
                checked_ids.add(car["Id"])
                details_url = f"https://api.encar.com/v1/readside/vehicle/{car['Id']}"
                details_response = requests.get(
                    details_url, headers={"User-Agent": "Mozilla/5.0"}
                )

                if details_response.status_code == 200:
                    details_data = details_response.json()
                    specs = details_data.get("spec", {})
                    displacement = specs.get("displacement", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

                    # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    fuel_type = translate_smartly(specs.get("fuelType", ""))
                    transmission = translate_smartly(specs.get("transmission", ""))
                    options = specs.get("options", [])
                    translated_options = (
                        [translate_smartly(opt) for opt in options[:5]]
                        if options
                        else []
                    )

                    options_text = ", ".join(translated_options)
                    options_display = (
                        f"\nüîß –û–ø—Ü–∏–∏: {options_text}" if options_text else ""
                    )

                    extra_text = f"\nüèéÔ∏è –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {displacement}cc{options_display}\n\nüëâ <a href='https://fem.encar.com/cars/detail/{car['Id']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>"
                else:
                    extra_text = "\n‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –º–∞—à–∏–Ω–µ."

                name = f'{car.get("Manufacturer", "")} {car.get("Model", "")} {car.get("Badge", "")}'
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                translated_name = translate_smartly(name)
                price = car.get("Price", 0)
                mileage = car.get("Mileage", 0)
                year = car.get("FormYear", "")

                def format_number(n):
                    return f"{int(n):,}".replace(",", " ")

                formatted_mileage = format_number(mileage)
                formatted_price = format_number(price * 10000)

                text = (
                    f"‚úÖ –ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!\n\n<b>{translated_name}</b> {year} –≥.\n–ü—Ä–æ–±–µ–≥: {formatted_mileage} –∫–º\n–¶–µ–Ω–∞: ‚Ç©{formatted_price}"
                    + extra_text
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton(
                        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫",
                        callback_data="search_car",
                    )
                )
                markup.add(
                    types.InlineKeyboardButton(
                        "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="start",
                    )
                )
                bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)

            time.sleep(300)
        except Exception as e:
            print(f"üîß –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ: {e}")
            time.sleep(300)


# –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–æ–º–∞–Ω–¥ userlist –∏ remove_user
@bot.message_handler(commands=["userlist"])
def handle_userlist_command(message):
    if message.from_user.id not in [728438182, 6624693060, 6526086431]:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not ACCESS:
        bot.reply_to(message, "‚ùå –í —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    access_list = list(ACCESS)
    text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É:\n\n"
    for user_id in access_list:
        text += f"‚Ä¢ <code>{user_id}</code>\n"

    text += "\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/remove_user [ID]"

    bot.send_message(message.chat.id, text, parse_mode="HTML")


@bot.message_handler(commands=["remove_user"])
def handle_remove_user(message):
    if message.from_user.id not in [728438182, 6624693060, 6526086431]:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /remove_user [ID]")
            return

        user_id_to_remove = int(parts[1])
        if user_id_to_remove in ACCESS:
            ACCESS.remove(user_id_to_remove)
            save_access()
            bot.reply_to(
                message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_remove} —É–¥–∞–ª—ë–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–∞."
            )
        else:
            bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–∞.")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KbChaChaCha
def get_kbchachacha_manufacturers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å KbChaChaCha"""
    url = (
        "https://www.kbchachacha.com/public/search/carMaker.json?page=1&sort=-orderDate"
    )
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –∏–º–ø–æ—Ä—Ç–Ω—ã—Ö, —Ç–∞–∫ –∏ –∫–æ—Ä–µ–π—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
        import_manufacturers = data.get("result", {}).get(
            "ÏàòÏûÖ", []
        )  # ÏàòÏûÖ = –∏–º–ø–æ—Ä—Ç–Ω—ã–µ
        korean_manufacturers = data.get("result", {}).get(
            "Íµ≠ÏÇ∞", []
        )  # Íµ≠ÏÇ∞ = –∫–æ—Ä–µ–π—Å–∫–∏–µ

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
        all_manufacturers = korean_manufacturers + import_manufacturers

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        all_manufacturers.sort(key=lambda x: x.get("makerName", ""))

        return all_manufacturers
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–æ–∫ –∏–∑ KbChaChaCha:", e)
        return []


def get_kbchachacha_models(maker_code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ ID –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Å KbChaChaCha"""
    url = f"https://www.kbchachacha.com/public/search/carClass.json?makerCode={maker_code}&page=1&sort=-orderDate"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        models = data.get("result", {}).get("code", [])
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        models.sort(key=lambda x: x.get("className", ""))
        return models
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π —Å KbChaChaCha –¥–ª—è {maker_code}:", e)
        return []


def get_kbchachacha_generations(maker_code, class_code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–π –ø–æ –∫–æ–¥—É –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ —Å KbChaChaCha"""
    url = f"https://www.kbchachacha.com/public/search/carName.json?makerCode={maker_code}&page=1&sort=-orderDate&classCode={class_code}"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        generations = data.get("result", {}).get("code", [])
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –ø–æ–∫–æ–ª–µ–Ω–∏–π
        generations.sort(key=lambda x: x.get("carOrder", 999))
        return generations
    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π —Å KbChaChaCha –¥–ª—è {maker_code}/{class_code}:",
            e,
        )
        return []


def get_kbchachacha_trims(maker_code, class_code, car_code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ –∫–æ–¥—É –º–∞—Ä–∫–∏, –º–æ–¥–µ–ª–∏ –∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è —Å KbChaChaCha"""
    url = f"https://www.kbchachacha.com/public/search/carModel.json?makerCode={maker_code}&page=1&sort=-orderDate&classCode={class_code}&carCode={car_code}"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        trims = data.get("result", {}).get("codeModel", [])
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        trims.sort(key=lambda x: x.get("modelOrder", 999))
        return trims
    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å KbChaChaCha –¥–ª—è {maker_code}/{class_code}/{car_code}:",
            e,
        )
        return []


def handle_kbchachacha_search(call):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
    manufacturers = get_kbchachacha_manufacturers()
    if not manufacturers:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä–∫–∏ –∏–∑ KbChaChaCha.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Ä–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in manufacturers:
        maker_name = item.get("makerName", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        maker_code = item.get("makerCode", "")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        translated_name = translate_smartly(maker_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_name = translated_name
        if maker_name != translated_name and translated_name != maker_name:
            display_name = f"{translated_name} ({maker_name})"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫
        callback_data = f"kbcha_brand_{maker_code}_{maker_name}"
        markup.add(
            types.InlineKeyboardButton(display_name, callback_data=callback_data)
        )

    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kbcha_brand_"))
def handle_kbcha_brand_selection(call):
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_", 3)
    maker_code = parts[2]
    maker_name = parts[3] if len(parts) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—Ä–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kbcha_maker_code"] = maker_code
    user_search_data[user_id]["kbcha_maker_name"] = maker_name

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä–∫–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ translate_smartly
    translated_maker_name = translate_smartly(maker_name)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
    models = get_kbchachacha_models(maker_code)
    if not models:
        bot.send_message(
            call.message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è {translated_maker_name}",
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in models:
        class_name = item.get("className", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        class_code = item.get("classCode", "")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ translate_smartly
        translated_name = translate_smartly(class_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_name = translated_name
        if class_name != translated_name and translated_name != class_name:
            display_name = f"{translated_name} ({class_name})"

        callback_data = f"kbcha_model_{class_code}_{class_name}"
        markup.add(
            types.InlineKeyboardButton(display_name, callback_data=callback_data)
        )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –º–∞—Ä–∫–∏ - –ª–∏–±–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ, –ª–∏–±–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ —Å–∫–æ–±–∫–∞—Ö
    display_maker_name = translated_maker_name
    if maker_name != translated_maker_name and translated_maker_name != maker_name:
        display_maker_name = f"{translated_maker_name} ({maker_name})"

    bot.send_message(
        call.message.chat.id,
        f"–ú–∞—Ä–∫–∞: {display_maker_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kbcha_model_"))
def handle_kbcha_model_selection(call):
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_", 3)
    class_code = parts[2]
    class_name = parts[3] if len(parts) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kbcha_class_code"] = class_code
    user_search_data[user_id]["kbcha_class_name"] = class_name

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    translated_class_name = translations.get(class_name, class_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ
    maker_name = user_search_data[user_id].get("kbcha_maker_name", "")
    maker_code = user_search_data[user_id].get("kbcha_maker_code", "")
    translated_maker_name = translations.get(maker_name, maker_name)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    generations = get_kbchachacha_generations(maker_code, class_code)
    if not generations:
        bot.send_message(
            call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–ª—è {class_name}"
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in generations:
        car_name = item.get("carName", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        car_code = item.get("carCode", "")
        from_year = item.get("fromYear", "")
        to_year = item.get("toYear", "")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        year_period = f"({from_year}-{to_year})" if from_year and to_year else ""
        if to_year == "ÌòÑÏû¨":  # ÌòÑÏû¨ = "–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è" –ø–æ-–∫–æ—Ä–µ–π—Å–∫–∏
            year_period = f"({from_year}-–Ω.–≤.)"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º translate_smartly –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
        # –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–∞–∫–∏–µ —Ñ—Ä–∞–∑—ã –∫–∞–∫ "Í∞ÄÏÜîÎ¶∞ 1.0 ÌÑ∞Î≥¥"
        translated_name = translate_smartly(car_name)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç: "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ü–µ—Ä–µ–≤–æ–¥) –ü–µ—Ä–∏–æ–¥" –∏–ª–∏ "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ü–µ—Ä–∏–æ–¥"
        if car_name != translated_name:
            display_text = f"{car_name} ({translated_name}) {year_period}"
        else:
            display_text = f"{car_name} {year_period}"

        callback_data = f"kbcha_gen_{car_code}_{car_name}"
        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    display_maker_name = (
        f"{maker_name} ({translated_maker_name})"
        if maker_name != translated_maker_name
        else maker_name
    )
    display_class_name = (
        f"{class_name} ({translated_class_name})"
        if class_name != translated_class_name
        else class_name
    )

    bot.send_message(
        call.message.chat.id,
        f"–ú–∞—Ä–∫–∞: {display_maker_name}\n–ú–æ–¥–µ–ª—å: {display_class_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ:",
        reply_markup=markup,
    )


def search_kbchachacha_cars(
    maker_code,
    class_code,
    car_code,
    model_code,
    year_from=None,
    year_to=None,
    mileage_from=None,
    mileage_to=None,
    color_code=None,
):
    """
    –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ KbChaChaCha
    """
    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –ø–æ–∏—Å–∫–∞
    url = f"https://www.kbchachacha.com/public/search/list.empty?makerCode={maker_code}&page=1&sort=-orderDate&classCode={class_code}&carCode={car_code}&modelCode={model_code}"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if year_from and year_to:
        url += f"&regiDay={year_from},{year_to}"

    if mileage_from is not None and mileage_to is not None:
        url += f"&km={mileage_from},{mileage_to}"

    if color_code:
        url += f"&color={color_code}"

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    try:
        print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: {url}")
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, "html.parser")

        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
        car_areas = soup.select("div.list-in.type-wd-list div.area")

        results = []
        for area in car_areas[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
                car_seq = area.get("data-car-seq", "")
                car_link = f"https://www.kbchachacha.com/public/car/detail.kbc?carSeq={car_seq}"

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                car_title = area.select_one("div.con div.item strong.tit")
                title = car_title.text.strip() if car_title else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                translated_title = translate_smartly(title)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–¥–µ, –ø—Ä–æ–±–µ–≥–µ –∏ —Ä–µ–≥–∏–æ–Ω–µ
                data_line = area.select_one("div.con div.item div.data-line")
                details = (
                    [span.text.strip() for span in data_line.select("span")]
                    if data_line
                    else []
                )
                year = details[0] if len(details) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                mileage = details[1] if len(details) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                region = details[2] if len(details) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ–≥–∏–æ–Ω
                translated_region = translate_smartly(region)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                price_elem = area.select_one(
                    "div.con div.item div.sort-wrap strong.pay span.price"
                )
                price = price_elem.text.strip() if price_elem else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_elem = area.select_one("div.thumnail a.item span.item__img img")
                img_url = img_elem.get("src", "") if img_elem else ""

                results.append(
                    {
                        "title": translated_title,
                        "original_title": title,
                        "year": year,
                        "mileage": mileage,
                        "region": translated_region,
                        "original_region": region,
                        "price": price,
                        "link": car_link,
                        "img_url": img_url,
                    }
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
                continue

        return results
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ KbChaChaCha: {e}")
        return []


@bot.callback_query_handler(func=lambda call: call.data.startswith("kbcha_gen_"))
def handle_kbcha_generation_selection(call):
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_", 3)
    car_code = parts[2]
    car_name = parts[3] if len(parts) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kbcha_car_code"] = car_code
    user_search_data[user_id]["kbcha_car_name"] = car_name

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é translate_phrase
    # –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    translated_car_name = translate_smartly(car_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏
    maker_name = user_search_data[user_id].get("kbcha_maker_name", "")
    maker_code = user_search_data[user_id].get("kbcha_maker_code", "")
    class_name = user_search_data[user_id].get("kbcha_class_name", "")
    class_code = user_search_data[user_id].get("kbcha_class_code", "")

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    translated_maker_name = translations.get(maker_name, maker_name)
    translated_class_name = translations.get(class_name, class_name)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    trims = get_kbchachacha_trims(maker_code, class_code, car_code)
    if not trims:
        bot.send_message(
            call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {car_name}"
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in trims:
        model_name = item.get("modelName", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        model_code = item.get("modelCode", "")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è translate_phrase
        # –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        translated_name = translate_smartly(model_name)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç: "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ü–µ—Ä–µ–≤–æ–¥)" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç
        display_name = (
            f"{model_name} ({translated_name})"
            if model_name != translated_name
            else model_name
        )

        callback_data = f"kbcha_trim_{model_code}_{model_name}"
        markup.add(
            types.InlineKeyboardButton(display_name, callback_data=callback_data)
        )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    display_maker_name = (
        f"{maker_name} ({translated_maker_name})"
        if maker_name != translated_maker_name
        else maker_name
    )
    display_class_name = (
        f"{class_name} ({translated_class_name})"
        if class_name != translated_class_name
        else class_name
    )
    display_car_name = (
        f"{car_name} ({translated_car_name})"
        if car_name != translated_car_name
        else car_name
    )

    bot.send_message(
        call.message.chat.id,
        f"–ú–∞—Ä–∫–∞: {display_maker_name}\n–ú–æ–¥–µ–ª—å: {display_class_name}\n–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {display_car_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kbcha_trim_"))
def handle_kbcha_trim_selection(call):
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_", 3)
    model_code = parts[2]
    model_name = parts[3] if len(parts) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    print(f"‚úÖ DEBUG kbcha_trim_selection - raw data:")
    print(f"model_code: {model_code}")
    print(f"model_name: {model_name}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kbcha_model_code"] = model_code
    user_search_data[user_id]["kbcha_model_name"] = model_name

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è translate_phrase
    translated_model_name = translate_smartly(model_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    maker_name = user_search_data[user_id].get("kbcha_maker_name", "")
    maker_code = user_search_data[user_id].get("kbcha_maker_code", "")
    class_name = user_search_data[user_id].get("kbcha_class_name", "")
    class_code = user_search_data[user_id].get("kbcha_class_code", "")
    car_name = user_search_data[user_id].get("kbcha_car_name", "")
    car_code = user_search_data[user_id].get("kbcha_car_code", "")

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    translated_maker_name = translations.get(maker_name, maker_name)
    translated_class_name = translations.get(class_name, class_name)
    translated_car_name = translate_smartly(car_name)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ –¥–ª—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≥–æ–¥–∞
    print(f"‚öôÔ∏è DEBUG kbcha_trim_selection - car_name: '{car_name}'")

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    start_year = datetime.now().year - 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –ª–µ—Ç –Ω–∞–∑–∞–¥
    end_year = datetime.now().year  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –≥–æ–¥

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –≤—ã–ø—É—Å–∫–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è –≤ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–∏
    if "(" in car_name and ")" in car_name:
        period_part = car_name.split("(")[1].split(")")[0].strip()
        print(f"‚öôÔ∏è DEBUG kbcha_trim_selection - period_part: '{period_part}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        if "‚Äî" in period_part:
            parts = period_part.split("‚Äî")
        elif "-" in period_part:
            parts = period_part.split("-")
        else:
            parts = []

        print(f"‚öôÔ∏è DEBUG kbcha_trim_selection - split parts: {parts}")

        if len(parts) == 2:
            start_date = parts[0].strip()
            end_date = parts[1].strip()
            print(
                f"‚öôÔ∏è DEBUG kbcha_trim_selection - start_date: '{start_date}', end_date: '{end_date}'"
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã (—Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å "03.2020" –∏–ª–∏ "2020")
            if "." in start_date:
                start_year_str = start_date.split(".")[-1]
                print(
                    f"‚öôÔ∏è DEBUG kbcha_trim_selection - parsed start_year_str: '{start_year_str}'"
                )
                if start_year_str.isdigit() and len(start_year_str) == 4:
                    start_year = int(start_year_str)
            elif start_date.isdigit() and len(start_date) == 4:
                start_year = int(start_date)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
            if "." in end_date:
                end_year_str = end_date.split(".")[-1]
                print(
                    f"‚öôÔ∏è DEBUG kbcha_trim_selection - parsed end_year_str: '{end_year_str}'"
                )
                if end_year_str.isdigit() and len(end_year_str) == 4:
                    end_year = int(end_year_str)
            elif end_date.isdigit() and len(end_date) == 4:
                end_year = int(end_date)

    print(
        f"‚öôÔ∏è DEBUG kbcha_trim_selection - final start_year: {start_year}, end_year: {end_year}"
    )

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ start_year –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    current_year = datetime.now().year
    if start_year > current_year:
        start_year = current_year - 5

    # –ï—Å–ª–∏ end_year < start_year (–æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º current_year
    if end_year < start_year:
        end_year = current_year

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≥–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
    user_search_data[user_id]["kbcha_generation_start_year"] = start_year
    user_search_data[user_id]["kbcha_generation_end_year"] = end_year

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    markup = types.InlineKeyboardMarkup(row_width=3)

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥–∞ –æ—Ç –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–æ –µ–≥–æ –∫–æ–Ω—Ü–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    for year in range(start_year, min(end_year, current_year) + 1):
        markup.add(
            types.InlineKeyboardButton(
                f"{year}", callback_data=f"kbcha_year_from_{year}"
            )
        )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    display_maker_name = (
        f"{maker_name} ({translated_maker_name})"
        if maker_name != translated_maker_name
        else maker_name
    )
    display_class_name = (
        f"{class_name} ({translated_class_name})"
        if class_name != translated_class_name
        else class_name
    )
    display_car_name = (
        f"{car_name} ({translated_car_name})"
        if car_name != translated_car_name
        else car_name
    )
    display_model_name = (
        f"{model_name} ({translated_model_name})"
        if model_name != translated_model_name
        else model_name
    )

    bot.send_message(
        call.message.chat.id,
        f"–ú–∞—Ä–∫–∞: {display_maker_name}\n–ú–æ–¥–µ–ª—å: {display_class_name}\n–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {display_car_name}\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {display_model_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kbcha_year_from_"))
def handle_kbcha_year_from_selection(call):
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    year_from = call.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –Ω–∞—á–∞–ª–∞
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kbcha_year_from"] = year_from

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    end_year = user_search_data[user_id].get(
        "kbcha_generation_end_year", datetime.now().year
    )
    current_year = datetime.now().year
    year_from_int = int(year_from)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    markup = types.InlineKeyboardMarkup(row_width=3)
    for year in range(year_from_int, min(end_year, current_year) + 1):
        markup.add(
            types.InlineKeyboardButton(f"{year}", callback_data=f"kbcha_year_to_{year}")
        )

    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥: {year_from}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kbcha_year_to_"))
def handle_kbcha_year_to_selection(call):
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    year_to = call.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –∫–æ–Ω—Ü–∞
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kbcha_year_to"] = year_to

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–±–µ–≥–∞ –æ—Ç
    markup = types.InlineKeyboardMarkup(row_width=3)
    for mileage in [0, 10000, 20000, 30000, 50000, 70000, 100000]:
        markup.add(
            types.InlineKeyboardButton(
                f"{mileage} –∫–º", callback_data=f"kbcha_mileage_from_{mileage}"
            )
        )

    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {user_search_data[user_id]['kbcha_year_from']}-{year_to}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥:",
        reply_markup=markup,
    )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("kbcha_mileage_from_")
)
def handle_kbcha_mileage_from_selection(call):
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–±–µ–≥
    mileage_from = call.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kbcha_mileage_from"] = mileage_from

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–±–µ–≥–∞ –¥–æ
    markup = types.InlineKeyboardMarkup(row_width=3)
    mileage_from_int = int(mileage_from)

    for mileage in [50000, 100000, 150000, 200000, 250000, 300000]:
        if mileage > mileage_from_int:
            markup.add(
                types.InlineKeyboardButton(
                    f"{mileage} –∫–º", callback_data=f"kbcha_mileage_to_{mileage}"
                )
            )

    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥: {mileage_from} –∫–º\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kbcha_mileage_to_"))
def handle_kbcha_mileage_to_selection(call):
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–±–µ–≥
    mileage_to = call.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kbcha_mileage_to"] = mileage_to

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
    markup = types.InlineKeyboardMarkup(row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç "–õ—é–±–æ–π"
    markup.add(types.InlineKeyboardButton("–õ—é–±–æ–π", callback_data="kbcha_color_–õ—é–±–æ–π"))

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
    for kr_name, info in KBCHACHA_COLOR_TRANSLATIONS.items():
        if kr_name != "–õ—é–±–æ–π":  # –ò—Å–∫–ª—é—á–∞–µ–º "–õ—é–±–æ–π", —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤—ã—à–µ
            markup.add(
                types.InlineKeyboardButton(
                    info["ru"], callback_data=f"kbcha_color_{kr_name}"
                )
            )

    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–±–µ–≥–∞: {user_search_data[user_id]['kbcha_mileage_from']}-{mileage_to} –∫–º\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kbcha_color_"))
def handle_kbcha_color_selection(call):
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    color_kr = call.data.split("_")[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–¥ —Ü–≤–µ—Ç–∞
    color_info = KBCHACHA_COLOR_TRANSLATIONS.get(
        color_kr, {"ru": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "code": ""}
    )
    color_ru = color_info["ru"]
    color_code = color_info["code"]

    user_search_data[user_id]["kbcha_color_kr"] = color_kr
    user_search_data[user_id]["kbcha_color_ru"] = color_ru
    user_search_data[user_id]["kbcha_color_code"] = color_code

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    maker_name = user_search_data[user_id].get("kbcha_maker_name", "")
    maker_code = user_search_data[user_id].get("kbcha_maker_code", "")
    class_name = user_search_data[user_id].get("kbcha_class_name", "")
    class_code = user_search_data[user_id].get("kbcha_class_code", "")
    car_name = user_search_data[user_id].get("kbcha_car_name", "")
    car_code = user_search_data[user_id].get("kbcha_car_code", "")
    model_name = user_search_data[user_id].get("kbcha_model_name", "")
    model_code = user_search_data[user_id].get("kbcha_model_code", "")
    year_from = user_search_data[user_id].get("kbcha_year_from", "")
    year_to = user_search_data[user_id].get("kbcha_year_to", "")
    mileage_from = user_search_data[user_id].get("kbcha_mileage_from", "")
    mileage_to = user_search_data[user_id].get("kbcha_mileage_to", "")

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    translated_maker_name = translate_smartly(maker_name)
    translated_class_name = translate_smartly(class_name)
    translated_car_name = translate_smartly(car_name)
    translated_model_name = translate_smartly(model_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    bot.send_message(
        call.message.chat.id,
        f"üîç –ò—â–µ–º {translated_maker_name} {translated_class_name} {translated_car_name} {translated_model_name}, –≥–æ–¥: {year_from}-{year_to}, –ø—Ä–æ–±–µ–≥: {mileage_from}-{mileage_to} –∫–º, —Ü–≤–µ—Ç: {color_ru}...",
    )

    # –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    cars = search_kbchachacha_cars(
        maker_code,
        class_code,
        car_code,
        model_code,
        year_from,
        year_to,
        mileage_from,
        mileage_to,
        color_code if color_code else None,
    )

    if not cars:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫", callback_data="search_car"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"
            )
        )

        bot.send_message(
            call.message.chat.id,
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            f"–ú–∞—Ä–∫–∞: {translated_maker_name}\n"
            f"–ú–æ–¥–µ–ª—å: {translated_class_name}\n"
            f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {translated_car_name}\n"
            f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {translated_model_name}\n"
            f"–ì–æ–¥: {year_from}-{year_to}\n"
            f"–ü—Ä–æ–±–µ–≥: {mileage_from}-{mileage_to} –∫–º\n"
            f"–¶–≤–µ—Ç: {color_ru}",
            reply_markup=markup,
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    car = cars[0]
    caption = (
        f"üöó <b>{car['title']}</b>\n"
        f"üìÜ –ì–æ–¥: {car['year']}\n"
        f"üèÅ –ü—Ä–æ–±–µ–≥: {car['mileage']}\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {car['region']}\n"
        f"üí∞ –¶–µ–Ω–∞: {car['price']}ÎßåÏõê\n\n"
        f"üîó <a href='{car['link']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ KbChaChaCha</a>"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç
    if car["img_url"] and car["img_url"] != "":
        try:
            bot.send_photo(
                call.message.chat.id, car["img_url"], caption=caption, parse_mode="HTML"
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            bot.send_message(call.message.chat.id, caption, parse_mode="HTML")
    else:
        bot.send_message(call.message.chat.id, caption, parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫", callback_data="search_car"
        )
    )
    markup.add(
        types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )

    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n"
        f"–ú–∞—Ä–∫–∞: {translated_maker_name}\n"
        f"–ú–æ–¥–µ–ª—å: {translated_class_name}\n"
        f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {translated_car_name}\n"
        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {translated_model_name}\n"
        f"–ì–æ–¥: {year_from}-{year_to}\n"
        f"–ü—Ä–æ–±–µ–≥: {mileage_from}-{mileage_to} –∫–º\n"
        f"–¶–≤–µ—Ç: {color_ru}",
        reply_markup=markup,
    )


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KCar
def get_kcar_manufacturers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å KCar"""
    url = "https://api.kcar.com/bc/search/group/mnuftr"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Content-Type": "application/json",
    }
    payload = {"wr_eq_sell_dcd": "ALL", "wr_in_multi_columns": "cntr_rgn_cd|cntr_cd"}

    try:
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()
        manufacturers = data.get("data", [])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        manufacturers.sort(key=lambda x: x.get("mnuftrEnm", ""))

        return manufacturers
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–æ–∫ –∏–∑ KCar:", e)
        return []


def get_kcar_models(maker_code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏ —Å KCar"""
    url = "https://api.kcar.com/bc/search/group/modelGrp"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Content-Type": "application/json",
    }
    payload = {
        "wr_eq_sell_dcd": "ALL",
        "wr_in_multi_columns": "cntr_rgn_cd|cntr_cd",
        "wr_eq_mnuftr_cd": maker_code,
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()
        models = data.get("data", [])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        models.sort(key=lambda x: x.get("modelGrpNm", ""))

        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ —Å count > 0, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ
        models = [model for model in models if model.get("count", 0) > 0]

        return models
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π —Å KCar –¥–ª—è {maker_code}:", e)
        return []


def get_kcar_generations(maker_code, model_code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å KCar"""
    url = "https://api.kcar.com/bc/search/group/model"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Content-Type": "application/json",
    }
    payload = {
        "wr_eq_sell_dcd": "ALL",
        "wr_in_multi_columns": "cntr_rgn_cd|cntr_cd",
        "wr_eq_mnuftr_cd": maker_code,
        "wr_eq_model_grp_cd": model_code,
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()
        generations = data.get("data", [])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –Ω–∞–ª–∏—á–∏–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        generations.sort(key=lambda x: x.get("count", 0), reverse=True)

        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è —Å count > 0
        generations = [gen for gen in generations if gen.get("count", 0) > 0]

        return generations
    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π —Å KCar –¥–ª—è {maker_code}/{model_code}:", e
        )
        return []


def get_kcar_configurations(maker_code, model_group_code, model_code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è —Å KCar"""
    url = "https://api.kcar.com/bc/search/group/grd"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Content-Type": "application/json",
    }
    payload = {
        "wr_eq_sell_dcd": "ALL",
        "wr_in_multi_columns": "cntr_rgn_cd|cntr_cd",
        "wr_eq_mnuftr_cd": maker_code,
        "wr_eq_model_grp_cd": model_group_code,
        "wr_eq_model_cd": model_code,
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()
        configurations = data.get("data", [])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –Ω–∞–ª–∏—á–∏–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        configurations.sort(key=lambda x: x.get("count", 0), reverse=True)

        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å count > 0
        configurations = [
            config for config in configurations if config.get("count", 0) > 0
        ]

        return configurations
    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å KCar –¥–ª—è {maker_code}/{model_group_code}/{model_code}:",
            e,
        )
        return []


def handle_kcar_search(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ KCar"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
    manufacturers = get_kcar_manufacturers()
    if not manufacturers:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä–∫–∏ —Å KCar.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Ä–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in manufacturers:
        maker_name = item.get("mnuftrEnm", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        maker_code = item.get("mnuftrCd", "")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–µ–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        kr_maker_name = item.get("mnuftrNm", "")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ—Ä–µ–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        translated_kr_name = ""
        if kr_maker_name:
            translated_kr_name = translate_smartly(kr_maker_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
        display_name = maker_name
        if kr_maker_name and translated_kr_name != kr_maker_name:
            display_name = f"{maker_name} ({translated_kr_name})"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫
        callback_data = f"kcar_brand_{maker_code}_{maker_name}"
        markup.add(
            types.InlineKeyboardButton(display_name, callback_data=callback_data)
        )

    bot.send_message(
        call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kcar_brand_"))
def handle_kcar_brand_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ KCar"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_", 3)
    maker_code = parts[2]
    maker_name = parts[3] if len(parts) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—Ä–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kcar_maker_code"] = maker_code
    user_search_data[user_id]["kcar_maker_name"] = maker_name

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
    models = get_kcar_models(maker_code)
    if not models:
        bot.send_message(
            call.message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è {maker_name} –∏–ª–∏ –¥–ª—è —ç—Ç–æ–π –º–∞—Ä–∫–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.",
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    for item in models:
        model_name = item.get("modelGrpNm", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        model_code = item.get("modelGrpCd", "")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        translated_model_name = translate_smartly(model_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
        display_name = model_name
        if model_name != translated_model_name and translated_model_name != model_name:
            display_name = f"{translated_model_name} ({model_name})"

        callback_data = f"kcar_model_{model_code}_{model_name}"
        markup.add(
            types.InlineKeyboardButton(display_name, callback_data=callback_data)
        )

    bot.send_message(
        call.message.chat.id,
        f"–ú–∞—Ä–∫–∞: {maker_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kcar_model_"))
def handle_kcar_model_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ KCar"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_", 3)
    model_code = parts[2]
    model_name = parts[3] if len(parts) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kcar_model_code"] = model_code
    user_search_data[user_id]["kcar_model_name"] = model_name

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    translated_model_name = translate_smartly(model_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ
    maker_name = user_search_data[user_id].get("kcar_maker_name", "")
    maker_code = user_search_data[user_id].get("kcar_maker_code", "")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏
    translated_maker_name = translate_smartly(maker_name)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    generations = get_kcar_generations(maker_code, model_code)
    if not generations:
        bot.send_message(
            call.message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–ª—è {translated_model_name} –∏–ª–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π.",
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in generations:
        gen_name = item.get("modelNm", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        gen_year = item.get("prdcnYear", "")
        gen_code = item.get("modelCd", "")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        translated_gen_name = translate_smartly(gen_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –≥–æ–¥–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        display_text = f"{translated_gen_name} {gen_year}"
        if gen_name != translated_gen_name and translated_gen_name != gen_name:
            display_text = f"{translated_gen_name} ({gen_name}) {gen_year}"

        callback_data = f"kcar_gen_{gen_code}_{gen_name}"

        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏
    display_maker_name = translated_maker_name
    if maker_name != translated_maker_name and translated_maker_name != maker_name:
        display_maker_name = f"{translated_maker_name} ({maker_name})"

    display_model_name = translated_model_name
    if model_name != translated_model_name and translated_model_name != model_name:
        display_model_name = f"{translated_model_name} ({model_name})"

    bot.send_message(
        call.message.chat.id,
        f"–ú–∞—Ä–∫–∞: {display_maker_name}\n–ú–æ–¥–µ–ª—å: {display_model_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kcar_gen_"))
def handle_kcar_generation_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ KCar"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_", 3)
    gen_code = parts[2]
    gen_name = parts[3] if len(parts) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kcar_gen_code"] = gen_code
    user_search_data[user_id]["kcar_gen_name"] = gen_name

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    translated_gen_name = translate_smartly(gen_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–∞—Ö
    maker_name = user_search_data[user_id].get("kcar_maker_name", "")
    maker_code = user_search_data[user_id].get("kcar_maker_code", "")
    model_name = user_search_data[user_id].get("kcar_model_name", "")
    model_code = user_search_data[user_id].get("kcar_model_code", "")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è
    translated_maker_name = translate_smartly(maker_name)
    translated_model_name = translate_smartly(model_name)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–¥–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    generations = get_kcar_generations(maker_code, model_code)

    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    selected_generation = None
    for gen in generations:
        if gen.get("modelCd") == gen_code:
            selected_generation = gen
            break

    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    if selected_generation:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–¥–∞—Ö –∏–∑ –ø–æ–ª—è prdcnYear
        gen_year_str = selected_generation.get("prdcnYear", "")
        print(
            f"‚öôÔ∏è DEBUG kcar_gen_selection - Found generation year info: '{gen_year_str}'"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–¥–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ '(19~24ÎÖÑ)' –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–º
        # —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if gen_year_str.startswith("(") and gen_year_str.endswith(")"):
            gen_year_str = gen_year_str[1:-1]

        if "~" in gen_year_str:
            year_parts = gen_year_str.split("~")
            if len(year_parts) == 2:
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '19')
                start_year_str = year_parts[0].strip()
                # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å - –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '24ÎÖÑ')
                end_year_str = year_parts[1].replace("ÎÖÑ", "").strip()

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞
                current_century = "20"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ 21 –≤–µ–∫–∞

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥
                if len(start_year_str) == 2 and start_year_str.isdigit():
                    start_year = int(current_century + start_year_str)
                    user_search_data[user_id]["kcar_generation_start_year"] = start_year
                    print(
                        f"‚öôÔ∏è DEBUG kcar_gen_selection - Extracted start_year: {start_year}"
                    )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥
                if len(end_year_str) == 2 and end_year_str.isdigit():
                    end_year = int(current_century + end_year_str)
                    user_search_data[user_id]["kcar_generation_end_year"] = end_year
                    print(
                        f"‚öôÔ∏è DEBUG kcar_gen_selection - Extracted end_year: {end_year}"
                    )

                # –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥ –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤–µ–∫–∞), –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                if (
                    "kcar_generation_start_year" in user_search_data[user_id]
                    and "kcar_generation_end_year" in user_search_data[user_id]
                ):
                    if (
                        user_search_data[user_id]["kcar_generation_end_year"]
                        < user_search_data[user_id]["kcar_generation_start_year"]
                    ):
                        user_search_data[user_id][
                            "kcar_generation_end_year"
                        ] += 100  # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫
        elif "ÌòÑÏû¨" in gen_year_str:  # ÌòÑÏû¨ = "–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è" –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º
            # –ï—Å–ª–∏ –≥–æ–¥—ã —É–∫–∞–∑–∞–Ω—ã –∫–∞–∫ "—Å X –≥–æ–¥–∞ –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è"
            year_part = (
                gen_year_str.replace("ÎÖÑ", "")
                .replace("ÌòÑÏû¨", "")
                .replace("~", "")
                .strip()
            )
            if len(year_part) == 2 and year_part.isdigit():
                start_year = int("20" + year_part)
                user_search_data[user_id]["kcar_generation_start_year"] = start_year
                user_search_data[user_id][
                    "kcar_generation_end_year"
                ] = datetime.now().year
                print(
                    f"‚öôÔ∏è DEBUG kcar_gen_selection - Extracted years: {start_year}-present"
                )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    configurations = get_kcar_configurations(maker_code, model_code, gen_code)
    if not configurations:
        bot.send_message(
            call.message.chat.id,
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {translated_gen_name} –∏–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.",
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in configurations:
        config_name = item.get("grdNm", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        config_code = item.get("grdCd", "")
        count = item.get("count", 0)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        translated_config_name = translate_smartly(config_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        display_text = f"{translated_config_name} ({count} —à—Ç.)"
        if (
            config_name != translated_config_name
            and translated_config_name != config_name
        ):
            display_text = f"{translated_config_name} ({config_name}) ({count} —à—Ç.)"

        callback_data = f"kcar_config_{config_code}_{config_name}"

        markup.add(
            types.InlineKeyboardButton(display_text, callback_data=callback_data)
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    display_maker_name = translated_maker_name
    if maker_name != translated_maker_name and translated_maker_name != maker_name:
        display_maker_name = f"{translated_maker_name} ({maker_name})"

    display_model_name = translated_model_name
    if model_name != translated_model_name and translated_model_name != model_name:
        display_model_name = f"{translated_model_name} ({model_name})"

    display_gen_name = translated_gen_name
    if gen_name != translated_gen_name and translated_gen_name != gen_name:
        display_gen_name = f"{translated_gen_name} ({gen_name})"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–¥–∞—Ö –≤—ã–ø—É—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    years_info = ""
    if (
        "kcar_generation_start_year" in user_search_data[user_id]
        and "kcar_generation_end_year" in user_search_data[user_id]
    ):
        start_year = user_search_data[user_id]["kcar_generation_start_year"]
        end_year = user_search_data[user_id]["kcar_generation_end_year"]
        years_info = f" ({start_year}-{end_year})"

    # –ü–µ—á–∞—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"‚öôÔ∏è DEBUG kcar_gen_selection - Final user_search_data for user {user_id}:")
    print(
        f"kcar_generation_start_year: {user_search_data[user_id].get('kcar_generation_start_year')}"
    )
    print(
        f"kcar_generation_end_year: {user_search_data[user_id].get('kcar_generation_end_year')}"
    )

    bot.send_message(
        call.message.chat.id,
        f"–ú–∞—Ä–∫–∞: {display_maker_name}\n–ú–æ–¥–µ–ª—å: {display_model_name}\n–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {display_gen_name}{years_info}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kcar_config_"))
def handle_kcar_configuration_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ KCar"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = call.data.split("_", 3)
    config_code = parts[2]
    config_name = parts[3] if len(parts) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    print(f"‚úÖ DEBUG kcar_config_selection - raw data:")
    print(f"config_code: {config_code}")
    print(f"config_name: {config_name}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kcar_config_code"] = config_code
    user_search_data[user_id]["kcar_config_name"] = config_name

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    translated_config_name = translate_smartly(config_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–∞—Ö
    maker_name = user_search_data[user_id].get("kcar_maker_name", "")
    maker_code = user_search_data[user_id].get("kcar_maker_code", "")
    model_name = user_search_data[user_id].get("kcar_model_name", "")
    model_code = user_search_data[user_id].get("kcar_model_code", "")
    gen_name = user_search_data[user_id].get("kcar_gen_name", "")
    gen_code = user_search_data[user_id].get("kcar_gen_code", "")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    translated_maker_name = translate_smartly(maker_name)
    translated_model_name = translate_smartly(model_name)
    translated_gen_name = translate_smartly(gen_name)

    # –¢–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
    current_year = datetime.now().year

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≥–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    start_year = user_search_data[user_id].get("kcar_generation_start_year")
    end_year = user_search_data[user_id].get("kcar_generation_end_year")

    print(f"‚öôÔ∏è DEBUG kcar_config_selection - Checking previously extracted years:")
    print(f"kcar_generation_start_year: {start_year}")
    print(f"kcar_generation_end_year: {end_year}")

    # –ï—Å–ª–∏ –≥–æ–¥—ã –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã —Ä–∞–Ω–µ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if start_year is not None and end_year is not None:
        print(
            f"‚öôÔ∏è DEBUG kcar_config_selection - Using previously extracted years: {start_year}-{end_year}"
        )
        years_extracted = True
    else:
        # –ï—Å–ª–∏ –≥–æ–¥—ã –Ω–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã —Ä–∞–Ω–µ–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏—Ö –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
        print(
            f"‚öôÔ∏è DEBUG kcar_config_selection - No previously extracted years, trying to extract from gen_name: '{gen_name}'"
        )
        years_extracted = False

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        start_year = current_year - 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –ª–µ—Ç –Ω–∞–∑–∞–¥
        end_year = current_year  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –≥–æ–¥

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≥–æ–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
        if "(" in gen_name and ")" in gen_name:
            period_part = gen_name.split("(")[1].split(")")[0].strip()
            print(f"‚öôÔ∏è DEBUG kcar_config_selection - period_part: '{period_part}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            if "‚Äî" in period_part:
                parts = period_part.split("‚Äî")
            elif "-" in period_part:
                parts = period_part.split("-")
            elif "~" in period_part:
                parts = period_part.split("~")
            else:
                parts = []

            print(f"‚öôÔ∏è DEBUG kcar_config_selection - split parts: {parts}")

            if len(parts) == 2:
                start_date = parts[0].strip()
                end_date = parts[1].strip()
                print(
                    f"‚öôÔ∏è DEBUG kcar_config_selection - start_date: '{start_date}', end_date: '{end_date}'"
                )

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
                if "." in start_date:
                    start_year_str = start_date.split(".")[-1]
                    print(
                        f"‚öôÔ∏è DEBUG kcar_config_selection - parsed start_year_str: '{start_year_str}'"
                    )
                    if start_year_str.isdigit() and len(start_year_str) == 4:
                        start_year = int(start_year_str)
                        years_extracted = True
                elif start_date.isdigit():
                    if len(start_date) == 4:
                        start_year = int(start_date)
                        years_extracted = True
                    elif len(start_date) == 2:
                        start_year = int("20" + start_date)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 21 –≤–µ–∫
                        years_extracted = True

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
                if "." in end_date:
                    end_year_str = end_date.split(".")[-1]
                    print(
                        f"‚öôÔ∏è DEBUG kcar_config_selection - parsed end_year_str: '{end_year_str}'"
                    )
                    if end_year_str.isdigit() and len(end_year_str) == 4:
                        end_year = int(end_year_str)
                        years_extracted = True
                elif end_date.isdigit():
                    if len(end_date) == 4:
                        end_year = int(end_date)
                        years_extracted = True
                    elif len(end_date) == 2:
                        end_year = int("20" + end_date)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 21 –≤–µ–∫
                        years_extracted = True
                elif "ÌòÑÏû¨" in end_date:  # ÌòÑÏû¨ = –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
                    end_year = current_year
                    years_extracted = True

    print(
        f"‚öôÔ∏è DEBUG kcar_config_selection - final start_year: {start_year}, end_year: {end_year}, years_extracted: {years_extracted}"
    )

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ start_year –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    if start_year > current_year:
        start_year = current_year - 5

    # –ï—Å–ª–∏ years_extracted = true –∏ end_year < start_year, –º–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
    if years_extracted and end_year < start_year:
        # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ–±–æ–ª—å—à–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∏ –≥–æ–¥—ã –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
        if start_year - end_year < 10:
            start_year, end_year = end_year, start_year
            print(
                f"‚öôÔ∏è DEBUG kcar_config_selection - swapped years: start_year: {start_year}, end_year: {end_year}"
            )
        else:
            # –ï—Å–ª–∏ –±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤–µ–∫–∞
            end_year += 100
            print(
                f"‚öôÔ∏è DEBUG kcar_config_selection - adjusted end_year century: {end_year}"
            )

    # –ï—Å–ª–∏ end_year > current_year + 1 (–≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º), –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≥–æ–¥–∞—Ö
    display_end_year = end_year
    if not years_extracted and display_end_year > current_year + 1:
        display_end_year = current_year

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≥–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    if "kcar_generation_start_year" not in user_search_data[user_id]:
        user_search_data[user_id]["kcar_generation_start_year"] = start_year
    if "kcar_generation_end_year" not in user_search_data[user_id]:
        user_search_data[user_id]["kcar_generation_end_year"] = end_year

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ–¥–∞ –æ—Ç
    year_markup = types.InlineKeyboardMarkup(row_width=3)

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥–∞ –æ—Ç –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–æ –µ–≥–æ –∫–æ–Ω—Ü–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    year_range = list(range(start_year, min(display_end_year, current_year) + 1))
    print(f"‚öôÔ∏è DEBUG kcar_config_selection - year range for buttons: {year_range}")

    for year in year_range:
        year_markup.add(
            types.InlineKeyboardButton(
                f"{year}", callback_data=f"kcar_year_from_{year}"
            )
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    display_maker_name = translated_maker_name
    if maker_name != translated_maker_name and translated_maker_name != maker_name:
        display_maker_name = f"{translated_maker_name} ({maker_name})"

    display_model_name = translated_model_name
    if model_name != translated_model_name and translated_model_name != model_name:
        display_model_name = f"{translated_model_name} ({model_name})"

    display_gen_name = translated_gen_name
    if gen_name != translated_gen_name and translated_gen_name != gen_name:
        display_gen_name = f"{translated_gen_name} ({gen_name})"

    display_config_name = translated_config_name
    if config_name != translated_config_name and translated_config_name != config_name:
        display_config_name = f"{translated_config_name} ({config_name})"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–∏–æ–¥–µ –≤—ã–ø—É—Å–∫–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    period_message = f"–ø–æ–∫–æ–ª–µ–Ω–∏–µ {start_year}-{end_year}"

    bot.send_message(
        call.message.chat.id,
        f"–ú–∞—Ä–∫–∞: {display_maker_name}\n–ú–æ–¥–µ–ª—å: {display_model_name}\n–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {display_gen_name}\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {display_config_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ ({period_message}):",
        reply_markup=year_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kcar_year_from_"))
def handle_kcar_year_from_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ –¥–ª—è KCar"""
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    year_from = call.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kcar_year_from"] = year_from

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
    end_year = user_search_data[user_id].get(
        "kcar_generation_end_year", datetime.now().year
    )
    current_year = datetime.now().year
    year_from_int = int(year_from)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è end_year
    if end_year > current_year + 1:
        # –ï—Å–ª–∏ end_year —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–º –≥–æ–¥–æ–º
        display_end_year = current_year
        print(
            f"‚öôÔ∏è DEBUG kcar_year_from_selection - limiting display_end_year to current_year: {current_year} (was {end_year})"
        )
    else:
        display_end_year = end_year

    print(
        f"‚öôÔ∏è DEBUG kcar_year_from_selection - using year range: {year_from_int} to {end_year}, display_end_year: {display_end_year}"
    )

    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥: {year_from}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥:",
        reply_markup=get_kcar_year_to_keyboard(
            year_from_int, min(display_end_year, current_year)
        ),
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kcar_year_to_"))
def handle_kcar_year_to_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≥–æ–¥–∞ –¥–ª—è KCar"""
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    year_to = call.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kcar_year_to"] = year_to

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞
    mileage_markup = types.InlineKeyboardMarkup(row_width=3)
    for mileage in [0, 10000, 20000, 30000, 50000, 70000, 100000]:
        mileage_markup.add(
            types.InlineKeyboardButton(
                f"{mileage} –∫–º", callback_data=f"kcar_mileage_from_{mileage}"
            )
        )

    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {user_search_data[user_id]['kcar_year_from']}-{year_to}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥:",
        reply_markup=mileage_markup,
    )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("kcar_mileage_from_")
)
def handle_kcar_mileage_from_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞ –¥–ª—è KCar"""
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–±–µ–≥
    mileage_from = call.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kcar_mileage_from"] = mileage_from

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞
    mileage_markup = types.InlineKeyboardMarkup(row_width=3)
    mileage_from_int = int(mileage_from)

    for mileage in [50000, 100000, 150000, 200000, 250000, 300000]:
        if mileage > mileage_from_int:
            mileage_markup.add(
                types.InlineKeyboardButton(
                    f"{mileage} –∫–º", callback_data=f"kcar_mileage_to_{mileage}"
                )
            )

    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥: {mileage_from} –∫–º\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥:",
        reply_markup=mileage_markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kcar_mileage_to_"))
def handle_kcar_mileage_to_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞ –¥–ª—è KCar"""
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–±–µ–≥
    mileage_to = call.data.split("_")[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    user_search_data[user_id]["kcar_mileage_to"] = mileage_to

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
    markup = types.InlineKeyboardMarkup(row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç "–õ—é–±–æ–π"
    markup.add(types.InlineKeyboardButton("–õ—é–±–æ–π", callback_data="kcar_color_–õ—é–±–æ–π"))

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
    for kr_name, ru_name in KCAR_COLOR_TRANSLATIONS.items():
        if kr_name != "–õ—é–±–æ–π":  # –ò—Å–∫–ª—é—á–∞–µ–º "–õ—é–±–æ–π", —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤—ã—à–µ
            markup.add(
                types.InlineKeyboardButton(
                    ru_name, callback_data=f"kcar_color_{kr_name}"
                )
            )

    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–±–µ–≥–∞: {user_search_data[user_id]['kcar_mileage_from']}-{mileage_to} –∫–º\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("kcar_color_"))
def handle_kcar_color_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è KCar"""
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    color_kr = call.data.split("_")[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    user_id = call.from_user.id
    if user_id not in user_search_data:
        user_search_data[user_id] = {}

    color_ru = KCAR_COLOR_TRANSLATIONS.get(color_kr, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    user_search_data[user_id]["kcar_color_kr"] = color_kr
    user_search_data[user_id]["kcar_color_ru"] = color_ru

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    maker_name = user_search_data[user_id].get("kcar_maker_name", "")
    maker_code = user_search_data[user_id].get("kcar_maker_code", "")
    model_name = user_search_data[user_id].get("kcar_model_name", "")
    model_code = user_search_data[user_id].get("kcar_model_code", "")
    gen_name = user_search_data[user_id].get("kcar_gen_name", "")
    gen_code = user_search_data[user_id].get("kcar_gen_code", "")
    config_name = user_search_data[user_id].get("kcar_config_name", "")
    config_code = user_search_data[user_id].get("kcar_config_code", "")
    year_from = user_search_data[user_id].get("kcar_year_from", "")
    year_to = user_search_data[user_id].get("kcar_year_to", "")
    mileage_from = user_search_data[user_id].get("kcar_mileage_from", "")
    mileage_to = user_search_data[user_id].get("kcar_mileage_to", "")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    translated_maker_name = translate_smartly(maker_name)
    translated_model_name = translate_smartly(model_name)
    translated_gen_name = translate_smartly(gen_name)
    translated_config_name = translate_smartly(config_name)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    display_maker_name = translated_maker_name
    if maker_name != translated_maker_name and translated_maker_name != maker_name:
        display_maker_name = f"{translated_maker_name} ({maker_name})"

    display_model_name = translated_model_name
    if model_name != translated_model_name and translated_model_name != model_name:
        display_model_name = f"{translated_model_name} ({model_name})"

    display_gen_name = translated_gen_name
    if gen_name != translated_gen_name and translated_gen_name != gen_name:
        display_gen_name = f"{translated_gen_name} ({gen_name})"

    display_config_name = translated_config_name
    if config_name != translated_config_name and translated_config_name != config_name:
        display_config_name = f"{translated_config_name} ({config_name})"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    summary = (
        f"‚úÖ –ü–æ–∏—Å–∫ –Ω–∞ KCar —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n\n"
        f"–ú–∞—Ä–∫–∞: {display_maker_name}\n"
        f"–ú–æ–¥–µ–ª—å: {display_model_name}\n"
        f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {display_gen_name}\n"
        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {display_config_name}\n"
        f"–ì–æ–¥: {year_from}-{year_to}\n"
        f"–ü—Ä–æ–±–µ–≥: {mileage_from}-{mileage_to} –∫–º\n"
        f"–¶–≤–µ—Ç: {color_ru}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π..."
    )

    message = bot.send_message(
        call.message.chat.id,
        summary,
        parse_mode="HTML",
    )

    # –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
    cars = search_kcar_cars_by_html(
        maker_code,
        model_code,
        gen_code,
        year_from=year_from,
        year_to=year_to,
        mileage_from=mileage_from,
        mileage_to=mileage_to,
        color=color_kr,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä–µ–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
    )

    if not cars:
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–∏—Å–∫–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ü–≤–µ—Ç—É
        search_url = f"https://www.kcar.com/bc/search?searchCond=%7B%22wr_eq_mnuftr_cd%22%3A%22{maker_code}%22%2C%22wr_eq_model_grp_cd%22%3A%22{model_code}%22%2C%22wr_eq_model_cd%22%3A%22{gen_code}%22%7D"

        no_results_text = (
            f"{summary}\n\n‚ùå <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞\n"
            f"‚Ä¢ –£–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç –ø–æ–∏—Å–∫\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ "
            f"–¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ KCar –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ."
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ KCar", url=search_url)
        )
        markup.add(
            types.InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_car")
        )
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))

        bot.edit_message_text(
            no_results_text,
            chat_id=call.message.chat.id,
            message_id=message.message_id,
            parse_mode="HTML",
            reply_markup=markup,
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        bot.edit_message_text(
            f"{summary}\n\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(cars)}",
            chat_id=call.message.chat.id,
            message_id=message.message_id,
            parse_mode="HTML",
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        for car in cars:
            car_message = (
                f"üöó <b>{car['title']}</b>\n\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {car['price']}\n"
                f"üìÖ <b>–ì–æ–¥:</b> {car['year']}\n"
                f"üõ£ <b>–ü—Ä–æ–±–µ–≥:</b> {car['mileage']}\n"
                f"‚õΩÔ∏è <b>–¢–æ–ø–ª–∏–≤–æ:</b> {car['fuel_type']}\n"
                f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {car['location']}\n"
            )

            if car["description"]:
                car_message += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {car['description']}\n"

            if car["labels"]:
                labels_text = ", ".join(car["labels"])
                car_message += f"\nüè∑ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> {labels_text}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            car_message += f"\nüîé <a href='{car['link']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ KCar</a>"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ KCar", url=car["link"])
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            if car["img_url"]:
                try:
                    bot.send_photo(
                        call.message.chat.id,
                        car["img_url"],
                        caption=car_message,
                        reply_markup=markup,
                        parse_mode="HTML",
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    bot.send_message(
                        call.message.chat.id,
                        car_message,
                        reply_markup=markup,
                        parse_mode="HTML",
                    )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                bot.send_message(
                    call.message.chat.id,
                    car_message,
                    reply_markup=markup,
                    parse_mode="HTML",
                )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫", callback_data="search_car"
        )
    )
    markup.add(
        types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )

    bot.send_message(
        call.message.chat.id,
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=markup,
        parse_mode="HTML",
    )


def search_kcar_cars_by_html(
    mnuftr_cd,
    model_grp_cd,
    model_cd,
    year_from=None,
    year_to=None,
    mileage_from=None,
    mileage_to=None,
    color=None,
):
    """
    –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ KCar —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    mnuftr_cd (str): –ö–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
    model_grp_cd (str): –ö–æ–¥ –≥—Ä—É–ø–ø—ã –º–æ–¥–µ–ª–µ–π
    model_cd (str): –ö–æ–¥ –º–æ–¥–µ–ª–∏
    year_from (str, optional): –ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
    year_to (str, optional): –ö–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
    mileage_from (str, optional): –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥
    mileage_to (str, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥
    color (str, optional): –ö–æ—Ä–µ–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    list: –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    # –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    base_search_cond = {
        "wr_eq_mnuftr_cd": mnuftr_cd,
        "wr_eq_model_grp_cd": model_grp_cd,
        "wr_eq_model_cd": model_cd,
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if year_from and year_to:
        base_search_cond["wr_bt_prdcn_year"] = f"{year_from},{year_to}"

    if mileage_from is not None and mileage_to is not None:
        base_search_cond["wr_bt_accent_km"] = f"{mileage_from},{mileage_to}"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ü–≤–µ—Ç (–Ω–µ "–õ—é–±–æ–π")
    if color and color != "–õ—é–±–æ–π":
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–µ–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ä–µ–¥–∏ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
        for kr_color, ru_color in KCAR_COLOR_TRANSLATIONS.items():
            if kr_color == color:
                # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–¥ —Ü–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ
                # –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–µ–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                base_search_cond["wr_eq_extl_color_nm"] = kr_color
                break

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ JSON —Å—Ç—Ä–æ–∫—É –∏ –∫–æ–¥–∏—Ä—É–µ–º –¥–ª—è URL
    search_cond = urllib.parse.quote(json.dumps(base_search_cond))

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f"https://www.kcar.com/bc/search?searchCond={search_cond}"

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    try:
        print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: {url}")
        response = requests.get(url, headers=headers)

        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            return []

        soup = BeautifulSoup(response.text, "html.parser")

        # –ò—â–µ–º –±–ª–æ–∫ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
        car_list_wrap = soup.select_one("div.carListWrap")
        if not car_list_wrap:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ (div.carListWrap)")
            return []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
        car_list_boxes = car_list_wrap.select("div.carListBox")
        if not car_list_boxes:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –±–ª–æ–∫–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ (div.carListBox)")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            empty_result = car_list_wrap.select_one("div.empty-car-list")
            if empty_result:
                print("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
            return []

        print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(car_list_boxes)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

        results = []
        for box in car_list_boxes[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
                # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                car_name_elem = box.select_one("div.carName p.carTit a")
                car_name = car_name_elem.text.strip() if car_name_elem else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                translated_car_name = translate_smartly(car_name)

                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                car_link = car_name_elem.get("href", "") if car_name_elem else ""
                if car_link:
                    car_link = f"https://www.kcar.com{car_link}"

                # –¶–µ–Ω–∞
                car_exp_elem = box.select_one("div.carExpIn p.carExp")
                car_price = car_exp_elem.text.strip() if car_exp_elem else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≥–æ–¥, –ø—Ä–æ–±–µ–≥, —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞)
                car_details_elem = box.select_one("p.detailCarCon")
                car_details = []
                if car_details_elem:
                    for span in car_details_elem.select("span"):
                        car_details.append(span.text.strip())

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª–µ–π
                year = car_details[0] if len(car_details) > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                mileage = car_details[1] if len(car_details) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                fuel_type = car_details[2] if len(car_details) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                location = car_details[3] if len(car_details) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
                translated_fuel_type = translate_smartly(fuel_type)
                translated_location = translate_smartly(location)

                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                img_elem = box.select_one("div.carListImg a img")
                img_url = img_elem.get("src", "") if img_elem else ""

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω
                if img_url and not img_url.startswith(("http://", "https://")):
                    img_url = f"https://www.kcar.com{img_url}"

                # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                car_desc_elem = box.select_one("div.carSimcDesc")
                car_desc = car_desc_elem.text.strip() if car_desc_elem else ""
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
                translated_desc = translate_smartly(car_desc)

                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ (VIP, 360 –∏ —Ç.–¥.)
                car_labels = []
                free_delivery = box.select_one("span.stateDlvy")
                if free_delivery:
                    car_labels.append("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")

                car_360 = box.select_one("span.car360Img")
                if car_360:
                    car_labels.append("360¬∞ –æ–±–∑–æ—Ä")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
                special_options = box.select("ul.infoTooltip li button")
                for option in special_options:
                    option_text = option.text.strip()
                    if option_text:
                        translated_option = translate_smartly(option_text)
                        car_labels.append(translated_option)

                results.append(
                    {
                        "title": translated_car_name,
                        "original_title": car_name,
                        "price": car_price,
                        "year": year,
                        "mileage": mileage,
                        "fuel_type": translated_fuel_type,
                        "original_fuel_type": fuel_type,
                        "location": translated_location,
                        "original_location": location,
                        "description": translated_desc,
                        "original_description": car_desc,
                        "link": car_link,
                        "img_url": img_url,
                        "labels": car_labels,
                    }
                )
                print(f"DEBUG: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å {car_name}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
                continue

        return results
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ KCar —á–µ—Ä–µ–∑ HTML: {e}")
        return []


def get_kcar_year_to_keyboard(start_year, end_year):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –ª–µ—Ç –æ—Ç start_year –¥–æ end_year –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≥–æ–¥–∞"""
    year_markup = types.InlineKeyboardMarkup(row_width=3)

    print(
        f"‚öôÔ∏è DEBUG get_kcar_year_to_keyboard - Creating keyboard with range: {start_year} to {end_year}"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≥–æ–¥–∞ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ –∫–æ–Ω–µ—á–Ω–æ–≥–æ
    for year in range(start_year, end_year + 1):
        year_markup.add(
            types.InlineKeyboardButton(f"{year}", callback_data=f"kcar_year_to_{year}")
        )

    return year_markup


@bot.callback_query_handler(func=lambda call: call.data.startswith("price_from_"))
def handle_price_from_selection(call):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_search_data:
        bot.answer_callback_query(
            call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."
        )
        return

    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    param = call.data.split("_")[2]

    if param == "any":
        price_from = None
        price_from_display = "–õ—é–±–∞—è"
    else:
        price_from = int(param)
        price_from_display = f"{price_from // 100} –º–ª–Ω –≤–æ–Ω"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    user_search_data[user_id]["price_from"] = price_from

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = user_search_data[user_id]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    markup = types.InlineKeyboardMarkup(row_width=3)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–∞—è" –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    markup.add(types.InlineKeyboardButton("–õ—é–±–∞—è", callback_data="price_to_any"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Ü–µ–Ω –æ—Ç 1 –¥–æ 100 –º–ª–Ω –≤–æ–Ω
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–µ
    min_price_value = 0 if price_from is None else price_from // 100

    price_ranges = [
        p
        for p in [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100]
        if p > min_price_value
    ]

    buttons = []
    for price in price_ranges:
        price_param = price * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä API (1 –º–ª–Ω = 100)
        buttons.append(
            types.InlineKeyboardButton(
                f"{price} –º–ª–Ω", callback_data=f"price_to_{price_param}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 3
    for i in range(0, len(buttons), 3):
        row = buttons[i : i + 3]
        markup.row(*row)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    selected_color_ru = (
        "–õ—é–±–æ–π"
        if user_data.get("color") == "all"
        else COLOR_TRANSLATIONS.get(user_data.get("color", ""), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    )

    bot.edit_message_text(
        f"–ú–∞—Ä–∫–∞: {user_data.get('manufacturer')} ({user_data.get('model_group')})\n"
        f"–ú–æ–¥–µ–ª—å: {user_data.get('model')} ({user_data.get('trim')})\n"
        f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {user_data.get('year_from')}-{user_data.get('year_to')}\n"
        f"–ü—Ä–æ–±–µ–≥: –æ—Ç {user_data.get('mileage_from')} –¥–æ {user_data.get('mileage_to')} –∫–º\n"
        f"–¶–≤–µ—Ç: {selected_color_ru}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price_from_display}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("price_to_"))
def handle_price_to_selection(call):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_search_data:
        bot.answer_callback_query(
            call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."
        )
        return

    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    param = call.data.split("_")[2]

    if param == "any":
        price_to = None
        price_to_display = "–õ—é–±–∞—è"
    else:
        price_to = int(param)
        price_to_display = f"{price_to // 100} –º–ª–Ω –≤–æ–Ω"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    user_search_data[user_id]["price_to"] = price_to

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_search_data[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if "mileage_from" not in user_data:
        print(
            "‚ö†Ô∏è DEBUG [handle_price_to_selection] - mileage_from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0"
        )
        user_data["mileage_from"] = 0

    if "mileage_to" not in user_data:
        print(
            "‚ö†Ô∏è DEBUG [handle_price_to_selection] - mileage_to –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100000"
        )
        user_data["mileage_to"] = 100000

    manufacturer = user_data["manufacturer"]
    model_group = user_data["model_group"]
    model = user_data["model"]
    trim = user_data["trim"]
    year_from = user_data["year_from"]
    year_to = user_data["year_to"]
    mileage_from = user_data["mileage_from"]
    mileage_to = user_data["mileage_to"]
    selected_color_kr = user_data["color"]
    price_from = user_data.get("price_from")
    price_to = user_data.get("price_to")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    selected_color_ru = (
        "–õ—é–±–æ–π"
        if selected_color_kr == "all"
        else COLOR_TRANSLATIONS.get(selected_color_kr, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    )

    price_from_display = (
        "–õ—é–±–∞—è" if price_from is None else f"{price_from // 100} –º–ª–Ω –≤–æ–Ω"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    bot.send_message(
        call.message.chat.id,
        "üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
    )

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    bot.send_message(
        call.message.chat.id,
        f"üìã –í–∞—à –∑–∞–ø—Ä–æ—Å:\n"
        f"‚Ä¢ {manufacturer} {model_group} {model}\n"
        f"‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {trim}\n"
        f"‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year_from}-{year_to}\n"
        f"‚Ä¢ –ü—Ä–æ–±–µ–≥: –æ—Ç {mileage_from} –¥–æ {mileage_to} –∫–º\n"
        f"‚Ä¢ –¶–≤–µ—Ç: {selected_color_ru}\n"
        f"‚Ä¢ –¶–µ–Ω–∞: –æ—Ç {price_from_display} –¥–æ {price_to_display}",
    )

    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫", callback_data="search_car"
        )
    )
    markup.add(
        types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )
    bot.send_message(
        call.message.chat.id,
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø–æ–∏—Å–∫ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
        reply_markup=markup,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_requests:
        user_requests[user_id] = []

    user_requests[user_id].append(
        {
            "manufacturer": manufacturer,
            "model_group": model_group,
            "model": model,
            "trim": trim,
            "year_from": year_from,
            "year_to": year_to,
            "mileage_from": mileage_from,
            "mileage_to": mileage_to,
            "color": selected_color_kr,
            "price_from": price_from,
            "price_to": price_to,
        }
    )

    save_requests(user_requests)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(
        target=check_for_new_cars,
        args=(
            call.from_user.id,  # user_id –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
            call.message.chat.id,  # chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            manufacturer.strip(),
            model_group.strip(),
            model.strip(),
            trim.strip(),
            year_from,
            year_to,
            mileage_from,
            mileage_to,
            "" if selected_color_kr == "all" else selected_color_kr.strip(),
            price_from,
            price_to,
        ),
        daemon=True,
    ).start()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from datetime import datetime

    print("=" * 50)
    print(
        f"üöÄ [UniTrading Bot] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Äî {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    load_requests()
    print("‚úÖ –ó–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    print("=" * 50)
    bot.infinity_polling()
